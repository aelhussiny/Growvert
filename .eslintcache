[{"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\index.js":"1","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\App.js":"2","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\PrivateRoute.js":"3","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\theme.js":"4","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\Auth.js":"5","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\LoginScreen\\index.js":"6","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\AllGrowsScreen\\index.js":"7","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\firebase.js":"8","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\LoginScreen\\LoginScreen.js":"9","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\AllGrowsScreen\\AllGrowsScreen.js":"10","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\LoginScreen\\styles.js":"11","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\AllGrowsScreen\\styles.js":"12","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\Navbar\\index.js":"13","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\Navbar\\Navbar.js":"14","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\Navbar\\styles.js":"15","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\ProfileScreen\\index.js":"16","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\ProfileScreen\\ProfileScreen.js":"17","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\ProfileScreen\\styles.js":"18","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\RegisterScreen\\index.js":"19","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\RegisterScreen\\styles.js":"20","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\RegisterScreen\\RegisterScreen.js":"21","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\ForgotPassScreen\\index.js":"22","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\ForgotPassScreen\\ForgotPassScreen.js":"23","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\ForgotPassScreen\\styles.js":"24","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\GrowBadge\\index.js":"25","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\GrowBadge\\GrowBadge.js":"26","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\GrowBadge\\styles.js":"27","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\GrowScreen\\index.js":"28","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\GrowScreen\\GrowScreen.js":"29","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\GrowScreen\\styles.js":"30","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\UpdateBadge\\index.js":"31","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\UpdateBadge\\UpdateBadge.js":"32","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\UpdateBadge\\styles.js":"33","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\OneGrowScene\\index.js":"34","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\OneGrowScene\\OneGrowScene.js":"35","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\OneGrowScene\\styles.js":"36","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\NewGrowScreen\\index.js":"37","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\NewGrowScreen\\NewGrowScreen.js":"38","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\NewGrowScreen\\styles.js":"39","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\NewGrowMap\\index.js":"40","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\NewGrowMap\\NewGrowMap.js":"41","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\NewGrowMap\\styles.js":"42","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\GrowWizard\\index.js":"43","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\GrowWizard\\GrowWizard.js":"44","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\GrowWizard\\styles.js":"45","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\DrawPolygonWStep\\index.js":"46","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\DrawPolygonWStep\\DrawPolygonWStep.js":"47","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\DrawPolygonWStep\\styles.js":"48","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\SelectPTypeWStep\\index.js":"49","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\SelectPTypeWStep\\SelectPTypeWStep.js":"50","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\SelectPTypeWStep\\styles.js":"51","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\PlantRecWStep\\index.js":"52","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\PlantRecWStep\\PlantRecWStep.js":"53","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\PlantRecWStep\\styles.js":"54","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\PlantOption\\PlantOption.js":"55","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\PlantOption\\styles.js":"56","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\CreateGrowWStep\\index.js":"57","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\CreateGrowWStep\\CreateGrowWStep.js":"58","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\CreateGrowWStep\\styles.js":"59","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\MyGrowsScene\\index.js":"60","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\MyGrowsScene\\MyGrowsScene.js":"61","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\MyGrowsScene\\styles.js":"62"},{"size":168,"mtime":1641971136010,"results":"63","hashOfConfig":"64"},{"size":1658,"mtime":1642405917059,"results":"65","hashOfConfig":"64"},{"size":598,"mtime":1641971934906,"results":"66","hashOfConfig":"64"},{"size":419,"mtime":1642421187007,"results":"67","hashOfConfig":"64"},{"size":518,"mtime":1641971135815,"results":"68","hashOfConfig":"64"},{"size":71,"mtime":1641971867465,"results":"69","hashOfConfig":"64"},{"size":80,"mtime":1641971900550,"results":"70","hashOfConfig":"64"},{"size":546,"mtime":1641971687562,"results":"71","hashOfConfig":"64"},{"size":3266,"mtime":1642508647450,"results":"72","hashOfConfig":"64"},{"size":5007,"mtime":1642508445341,"results":"73","hashOfConfig":"64"},{"size":1101,"mtime":1642057912743,"results":"74","hashOfConfig":"64"},{"size":348,"mtime":1642504492601,"results":"75","hashOfConfig":"64"},{"size":56,"mtime":1641975949807,"results":"76","hashOfConfig":"64"},{"size":7765,"mtime":1642505378326,"results":"77","hashOfConfig":"64"},{"size":654,"mtime":1642158070891,"results":"78","hashOfConfig":"64"},{"size":77,"mtime":1641983219197,"results":"79","hashOfConfig":"64"},{"size":4921,"mtime":1642502799077,"results":"80","hashOfConfig":"64"},{"size":691,"mtime":1642502764885,"results":"81","hashOfConfig":"64"},{"size":80,"mtime":1642060557998,"results":"82","hashOfConfig":"64"},{"size":1101,"mtime":1642060538636,"results":"83","hashOfConfig":"64"},{"size":3937,"mtime":1642072078217,"results":"84","hashOfConfig":"64"},{"size":86,"mtime":1642071968955,"results":"85","hashOfConfig":"64"},{"size":1779,"mtime":1642072261410,"results":"86","hashOfConfig":"64"},{"size":1101,"mtime":1642071948408,"results":"87","hashOfConfig":"64"},{"size":65,"mtime":1642074238006,"results":"88","hashOfConfig":"64"},{"size":3634,"mtime":1642507459824,"results":"89","hashOfConfig":"64"},{"size":702,"mtime":1642075625371,"results":"90","hashOfConfig":"64"},{"size":68,"mtime":1642151223702,"results":"91","hashOfConfig":"64"},{"size":11081,"mtime":1642507480653,"results":"92","hashOfConfig":"64"},{"size":1687,"mtime":1642163692131,"results":"93","hashOfConfig":"64"},{"size":71,"mtime":1642154400741,"results":"94","hashOfConfig":"64"},{"size":2291,"mtime":1642164901374,"results":"95","hashOfConfig":"64"},{"size":680,"mtime":1642158141202,"results":"96","hashOfConfig":"64"},{"size":74,"mtime":1642161416684,"results":"97","hashOfConfig":"64"},{"size":2524,"mtime":1642507507813,"results":"98","hashOfConfig":"64"},{"size":55,"mtime":1642158330338,"results":"99","hashOfConfig":"64"},{"size":77,"mtime":1642404901325,"results":"100","hashOfConfig":"64"},{"size":2197,"mtime":1642500289221,"results":"101","hashOfConfig":"64"},{"size":189,"mtime":1642405175046,"results":"102","hashOfConfig":"64"},{"size":68,"mtime":1642405264379,"results":"103","hashOfConfig":"64"},{"size":7939,"mtime":1642507499574,"results":"104","hashOfConfig":"64"},{"size":146,"mtime":1642405344526,"results":"105","hashOfConfig":"64"},{"size":70,"mtime":1642407702798,"results":"106","hashOfConfig":"64"},{"size":598,"mtime":1642420714979,"results":"107","hashOfConfig":"64"},{"size":287,"mtime":1642408772019,"results":"108","hashOfConfig":"64"},{"size":88,"mtime":1642408741436,"results":"109","hashOfConfig":"64"},{"size":2258,"mtime":1642416613722,"results":"110","hashOfConfig":"64"},{"size":1028,"mtime":1642416502498,"results":"111","hashOfConfig":"64"},{"size":88,"mtime":1642420584287,"results":"112","hashOfConfig":"64"},{"size":2216,"mtime":1642496776524,"results":"113","hashOfConfig":"64"},{"size":1234,"mtime":1642426043508,"results":"114","hashOfConfig":"64"},{"size":79,"mtime":1642421591197,"results":"115","hashOfConfig":"64"},{"size":8775,"mtime":1642499764937,"results":"116","hashOfConfig":"64"},{"size":1126,"mtime":1642498391074,"results":"117","hashOfConfig":"64"},{"size":1753,"mtime":1642507536184,"results":"118","hashOfConfig":"64"},{"size":702,"mtime":1642496892541,"results":"119","hashOfConfig":"64"},{"size":85,"mtime":1642499939316,"results":"120","hashOfConfig":"64"},{"size":3061,"mtime":1642501975064,"results":"121","hashOfConfig":"64"},{"size":1126,"mtime":1642499897007,"results":"122","hashOfConfig":"64"},{"size":76,"mtime":1642502384649,"results":"123","hashOfConfig":"64"},{"size":4062,"mtime":1642507489996,"results":"124","hashOfConfig":"64"},{"size":55,"mtime":1642502357605,"results":"125","hashOfConfig":"64"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"14kcjzl",{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"128"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"128"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"128"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"128"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"128"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"128"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"128"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"128"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"128"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"128"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"128"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"128"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"128"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"128"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"128"},"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\index.js",[],["267","268"],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\App.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\PrivateRoute.js",[],["269","270"],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\theme.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\Auth.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\LoginScreen\\index.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\AllGrowsScreen\\index.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\firebase.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\LoginScreen\\LoginScreen.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\AllGrowsScreen\\AllGrowsScreen.js",["271"],"import React, { useEffect } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { loadModules } from \"esri-loader\";\r\nimport Navbar from \"../Navbar\";\r\n\r\nimport { Container } from \"./styles\";\r\n\r\nconst AllGrowsScreen = (props) => {\r\n    useEffect(() => {\r\n        document.getElementById(`grow-scene-all`).style.height =\r\n            document.getElementById(`grow-scene-all`).clientWidth + \"px\";\r\n        loadModules([\r\n            \"esri/views/SceneView\",\r\n            \"esri/WebScene\",\r\n            \"esri/geometry/Polygon\",\r\n            \"esri/Graphic\",\r\n            \"esri/tasks/QueryTask\",\r\n        ])\r\n            .then(([SceneView, WebScene, Polygon, Graphic, QueryTask]) => {\r\n                const scene = new WebScene({\r\n                    portalItem: {\r\n                        id: window.config.baseSceneId,\r\n                    },\r\n                });\r\n                const view = new SceneView({\r\n                    map: scene,\r\n                    container: `grow-scene-all`,\r\n                });\r\n\r\n                view.when(() => {\r\n                    const growsTask = new QueryTask({\r\n                        url: window.config.growsLayer.url,\r\n                    });\r\n\r\n                    growsTask\r\n                        .execute({\r\n                            where: `end_time > DATE '${new Date().getFullYear()}-${(\r\n                                \"\" +\r\n                                (new Date().getMonth() + 1)\r\n                            ).padStart(2, \"0\")}-${\r\n                                \"\" + (new Date().getDate() + 1)\r\n                            }'`,\r\n                            outFields: \"*\",\r\n                            returnGeometry: true,\r\n                        })\r\n                        .then((result) => {\r\n                            const graphics = [];\r\n                            result.features.forEach((feature) => {\r\n                                feature.geometry = feature.geometry.centroid;\r\n                                feature.geometry.z = feature.attributes.height;\r\n                                graphics.push(\r\n                                    new Graphic({\r\n                                        geometry: feature.geometry,\r\n                                        symbol: {\r\n                                            type: \"picture-marker\",\r\n                                            url: `/img/${result.fields\r\n                                                .filter(\r\n                                                    (field) =>\r\n                                                        field.name ===\r\n                                                        \"plant_type\"\r\n                                                )[0]\r\n                                                .domain.codedValues.filter(\r\n                                                    (codedValue) =>\r\n                                                        codedValue.code ===\r\n                                                        feature.attributes\r\n                                                            .plant_type\r\n                                                )[0]\r\n                                                .name.toLowerCase()\r\n                                                .replace(/ /g, \"\")}.svg`,\r\n                                            width: \"16px\",\r\n                                            height: \"16px\",\r\n                                        },\r\n                                        attributes: {\r\n                                            id: feature.attributes.OBJECTID,\r\n                                            USABLE: true,\r\n                                        },\r\n                                    })\r\n                                );\r\n                            });\r\n\r\n                            view.graphics.addMany(graphics);\r\n\r\n                            view.goTo(graphics);\r\n                        });\r\n\r\n                    view.on(\"click\", (event) => {\r\n                        view.hitTest(event).then(function (response) {\r\n                            let plantResults = response.results.filter(\r\n                                (a) => a.graphic.attributes.USABLE\r\n                            );\r\n\r\n                            if (plantResults.length > 0) {\r\n                                props.history.push(\r\n                                    `/grow/${plantResults[0].graphic.attributes.id}`\r\n                                );\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <Container>\r\n            <Navbar history={props.history} />\r\n            <div\r\n                id=\"grow-scene-all\"\r\n                style={{ flexGrow: 1, width: \"100%\" }}\r\n            ></div>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(AllGrowsScreen);\r\n","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\LoginScreen\\styles.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\AllGrowsScreen\\styles.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\Navbar\\index.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\Navbar\\Navbar.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\Navbar\\styles.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\ProfileScreen\\index.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\ProfileScreen\\ProfileScreen.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\ProfileScreen\\styles.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\RegisterScreen\\index.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\RegisterScreen\\styles.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\RegisterScreen\\RegisterScreen.js",["272"],"import React, { useCallback, useContext } from \"react\";\r\nimport { withRouter, Redirect } from \"react-router\";\r\nimport Navbar from \"../Navbar\";\r\nimport app from \"../firebase\";\r\nimport { AuthContext } from \"../Auth\";\r\n\r\nimport {\r\n    Container,\r\n    StyledForm,\r\n    StyledLabel,\r\n    StyledButton,\r\n    FormContainer,\r\n} from \"./styles\";\r\n\r\nconst RegisterScreen = ({ history }) => {\r\n    const handleRegister = useCallback(\r\n        async (event) => {\r\n            event.preventDefault();\r\n            const {\r\n                fname,\r\n                lname,\r\n                email,\r\n                password,\r\n                confirmpassword,\r\n            } = event.target.elements;\r\n            if (confirmpassword.value !== password.value) {\r\n                alert(\"Confirm password must match password\");\r\n            } else {\r\n                try {\r\n                    let userCredential = await app\r\n                        .auth()\r\n                        .createUserWithEmailAndPassword(\r\n                            email.value,\r\n                            password.value\r\n                        );\r\n                    const db = app.firestore();\r\n                    db.collection(\"users\").doc(userCredential.user.uid).set({\r\n                        fname: fname.value,\r\n                        lname: lname.value,\r\n                    });\r\n                } catch (err) {\r\n                    alert(err);\r\n                }\r\n            }\r\n        },\r\n        [history]\r\n    );\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    if (currentUser) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Navbar history={history} />\r\n            <FormContainer>\r\n                <p style={{ color: \"white\" }}>Let's get to know you!</p>\r\n                <StyledForm onSubmit={handleRegister}>\r\n                    <StyledLabel>First Name: </StyledLabel>\r\n                    <input\r\n                        style={{ padding: \"10px\" }}\r\n                        name=\"fname\"\r\n                        type=\"text\"\r\n                        required\r\n                        placeholder=\"First Name\"\r\n                    />\r\n                    <br />\r\n                    <StyledLabel>Last Name: </StyledLabel>\r\n                    <input\r\n                        style={{ padding: \"10px\" }}\r\n                        name=\"lname\"\r\n                        type=\"text\"\r\n                        required\r\n                        placeholder=\"Last Name\"\r\n                    />\r\n                    <br />\r\n                    <StyledLabel>eMail Address: </StyledLabel>\r\n                    <input\r\n                        style={{ padding: \"10px\" }}\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        required\r\n                        placeholder=\"eMail\"\r\n                    />\r\n                    <br />\r\n                    <StyledLabel>Password:</StyledLabel>\r\n                    <input\r\n                        style={{ padding: \"10px\" }}\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        required\r\n                        placeholder=\"Password\"\r\n                        minLength=\"6\"\r\n                    />\r\n                    <br />\r\n                    <StyledLabel>Confirm Password:</StyledLabel>\r\n                    <input\r\n                        style={{ padding: \"10px\" }}\r\n                        name=\"confirmpassword\"\r\n                        type=\"password\"\r\n                        required\r\n                        placeholder=\"Confirm Password\"\r\n                        minLength=\"6\"\r\n                    />\r\n                    <br />\r\n                    <StyledButton type=\"submit\">Register</StyledButton>\r\n                </StyledForm>\r\n            </FormContainer>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(RegisterScreen);\r\n","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\ForgotPassScreen\\index.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\ForgotPassScreen\\ForgotPassScreen.js",["273","274"],"import React, { useCallback, useContext } from \"react\";\r\nimport { withRouter, Redirect } from \"react-router\";\r\nimport Navbar from \"../Navbar\";\r\nimport app from \"../firebase\";\r\nimport { AuthContext } from \"../Auth\";\r\nimport logo from \"../img/logo.svg\";\r\n\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\nimport {\r\n    Container,\r\n    StyledForm,\r\n    StyledLabel,\r\n    StyledButton,\r\n    FormContainer,\r\n} from \"./styles\";\r\n\r\nconst ForgotPassScreen = ({ history }) => {\r\n    const handleForgotPass = useCallback(\r\n        async (event) => {\r\n            event.preventDefault();\r\n            const { email } = event.target.elements;\r\n            try {\r\n                await app\r\n                    .auth()\r\n                    .sendPasswordResetEmail(email.value);\r\n                history.push(\"/\");\r\n            } catch (err) {\r\n                alert(err);\r\n            }\r\n        },\r\n        [history]\r\n    );\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    if (currentUser) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Navbar history={history} />\r\n            <FormContainer>\r\n                <StyledForm onSubmit={handleForgotPass}>\r\n                    <StyledLabel>eMail Address: </StyledLabel>\r\n                    <input\r\n                        style={{ padding: \"10px\" }}\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        required\r\n                        placeholder=\"eMail\"\r\n                    />\r\n                    <br />\r\n                    <StyledButton type=\"submit\">Forgot Password</StyledButton>\r\n                </StyledForm>\r\n            </FormContainer>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(ForgotPassScreen);\r\n","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\ForgotPassScreen\\styles.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\GrowBadge\\index.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\GrowBadge\\GrowBadge.js",["275","276"],"import React, { useState, useEffect } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\nimport { Container, InfoContainer, Title, InfoPiece } from \"./styles\";\r\n\r\nconst GrowBadge = (props) => {\r\n    return props.fields && (props.fields.length > 0) ? (\r\n        <Link\r\n            href={`/grow/${props.data.OBJECTID}`}\r\n            onClick={(e) => {\r\n                e.preventDefault();\r\n                props.history.push(`/grow/${props.data.OBJECTID}`);\r\n            }}\r\n        >\r\n            <Container>\r\n                <img\r\n                    src={`https://hydroponics-app-f7956.web.app/img/${\r\n                        props.fields\r\n                            .filter((field) => field.name === \"plant_type\")[0]\r\n                            .domain.codedValues.filter(\r\n                                (codedValue) =>\r\n                                    codedValue.code === props.data.plant_type\r\n                            )[0].name.toLowerCase().replace(/ /g,\"\")\r\n                    }.svg`}\r\n                    alt={\r\n                        props.fields\r\n                            .filter((field) => field.name === \"plant_type\")[0]\r\n                            .domain.codedValues.filter(\r\n                                (codedValue) =>\r\n                                    codedValue.code === props.data.plant_type\r\n                            )[0].name\r\n                    }\r\n                    width=\"50\"\r\n                />\r\n                <InfoContainer>\r\n                    <Title>\r\n                        {\r\n                            props.fields\r\n                                .filter(\r\n                                    (field) => field.name === \"plant_type\"\r\n                                )[0]\r\n                                .domain.codedValues.filter(\r\n                                    (codedValue) =>\r\n                                        codedValue.code ===\r\n                                        props.data.plant_type\r\n                                )[0].name\r\n                        }\r\n                    </Title>\r\n                    <InfoPiece>\r\n                        Area:{\" \"}\r\n                        {props.data.Shape__Area.toLocaleString(undefined, {\r\n                            maximumFractionDigits: 2,\r\n                        })}{\" \"}\r\n                        sqm\r\n                    </InfoPiece>\r\n                    <InfoPiece>\r\n                        Plantation Type:{\" \"}\r\n                        {\r\n                            props.fields\r\n                                .filter(\r\n                                    (field) => field.name === \"plantation_type\"\r\n                                )[0]\r\n                                .domain.codedValues.filter(\r\n                                    (codedValue) =>\r\n                                        codedValue.code ===\r\n                                        props.data.plantation_type\r\n                                )[0].name\r\n                        }\r\n                    </InfoPiece>\r\n                    <InfoPiece>\r\n                        Growth Period:{\" \"}\r\n                        {new Date(props.data.start_time).toLocaleDateString()} -{\" \"}\r\n                        {new Date(props.data.end_time).toLocaleDateString()}\r\n                    </InfoPiece>\r\n                    <InfoPiece>\r\n                        Expected Yield: {props.data.expected_yield}\r\n                    </InfoPiece>\r\n                </InfoContainer>\r\n            </Container>\r\n        </Link>\r\n    ) : null;\r\n};\r\n\r\nexport default withRouter(GrowBadge);\r\n","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\GrowBadge\\styles.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\GrowScreen\\index.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\GrowScreen\\GrowScreen.js",["277"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport app from \"../firebase\";\r\nimport { AuthContext } from \"../Auth\";\r\nimport { withRouter, useParams } from \"react-router\";\r\nimport Navbar from \"../Navbar\";\r\nimport { loadModules } from \"esri-loader\";\r\n\r\nimport Link from \"@material-ui/core/Link\";\r\nimport UpdateBadge from \"../UpdateBadge\";\r\n\r\nimport {\r\n    Container,\r\n    PageContainer,\r\n    InfoColumn,\r\n    UpdatesColumn,\r\n    TitleContainer,\r\n    StyledButton,\r\n    StylediFrame,\r\n    ModalStyled,\r\n} from \"./styles\";\r\nimport OneGrowScene from \"../OneGrowScene\";\r\n\r\nconst GrowScreen = ({ history }) => {\r\n    const { growId } = useParams();\r\n    const [growData, setGrowData] = useState(null);\r\n    const [updateData, setUpdateData] = useState([]);\r\n    const [dataCollectionIsOpen, setDataCollectionIsOpen] = useState(false);\r\n    const [fields, setFieldsData] = useState([]);\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    const handleDataCollectionClose = () => {\r\n        setDataCollectionIsOpen(false);\r\n        getGrowUpdates();\r\n    };\r\n\r\n    const openDataCollection = () => {\r\n        setDataCollectionIsOpen(true);\r\n    };\r\n\r\n    const getGrowUpdates = async () => {\r\n        loadModules([\"esri/tasks/QueryTask\"]).then(([QueryTask]) => {\r\n            let queryTask = new QueryTask({\r\n                url: window.config.updates.url,\r\n            });\r\n            queryTask\r\n                .execute({\r\n                    where: `grow_id = ${growId}`,\r\n                    outFields: \"*\",\r\n                    returnGeometry: false,\r\n                })\r\n                .then((result) => {\r\n                    setUpdateData(\r\n                        result.features.sort(\r\n                            (a, b) =>\r\n                                b.attributes.CreationDate -\r\n                                a.attributes.CreationDate\r\n                        )\r\n                    );\r\n                });\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const getGrowData = async () => {\r\n            loadModules([\"esri/tasks/QueryTask\"]).then(([QueryTask]) => {\r\n                let queryTask = new QueryTask({\r\n                    url: window.config.growsLayer.url,\r\n                });\r\n                queryTask\r\n                    .execute({\r\n                        where: `OBJECTID = '${growId}'`,\r\n                        outFields: \"*\",\r\n                        returnGeometry: true,\r\n                    })\r\n                    .then(async (result) => {\r\n                        const data = result.features[0];\r\n                        const db = app.firestore();\r\n                        let dbUserData = await db\r\n                            .collection(\"users\")\r\n                            .doc(data.attributes.creator_id)\r\n                            .get();\r\n                        if (dbUserData.exists) {\r\n                            dbUserData = dbUserData.data();\r\n                            data.attributes.creator = dbUserData;\r\n                        }\r\n                        setFieldsData(result.fields);\r\n                        setGrowData(data);\r\n                    });\r\n            });\r\n        };\r\n        if (growId) {\r\n            getGrowData();\r\n            getGrowUpdates();\r\n        }\r\n    }, [growId]);\r\n\r\n    if (growData && fields.length > 0 && growData.attributes.creator) {\r\n        const growUpdateBadges = updateData.map((update) => (\r\n            <UpdateBadge\r\n                key={`grow_${growId}_update_${update.attributes.objectid}`}\r\n                history={history}\r\n                data={update}\r\n            />\r\n        ));\r\n        return (\r\n            <Container>\r\n                <Navbar history={history} />\r\n                <PageContainer>\r\n                    <InfoColumn>\r\n                        <h1 style={{ color: \"#9FC73B\" }}>\r\n                            <img\r\n                                src={`https://hydroponics-app-f7956.web.app/img/${fields\r\n                                    .filter(\r\n                                        (field) => field.name === \"plant_type\"\r\n                                    )[0]\r\n                                    .domain.codedValues.filter(\r\n                                        (codedValue) =>\r\n                                            codedValue.code ===\r\n                                            growData.attributes.plant_type\r\n                                    )[0]\r\n                                    .name.toLowerCase().replace(/ /g,\"\")}.svg`}\r\n                                alt={\r\n                                    fields\r\n                                        .filter(\r\n                                            (field) =>\r\n                                                field.name === \"plant_type\"\r\n                                        )[0]\r\n                                        .domain.codedValues.filter(\r\n                                            (codedValue) =>\r\n                                                codedValue.code ===\r\n                                                growData.attributes.plant_type\r\n                                        )[0].name\r\n                                }\r\n                                width=\"30px\"\r\n                                style={{ marginRight: \"5px\" }}\r\n                            />\r\n                            {\r\n                                fields\r\n                                    .filter(\r\n                                        (field) => field.name === \"plant_type\"\r\n                                    )[0]\r\n                                    .domain.codedValues.filter(\r\n                                        (codedValue) =>\r\n                                            codedValue.code ===\r\n                                            growData.attributes.plant_type\r\n                                    )[0].name\r\n                            }\r\n                        </h1>\r\n                        <Link\r\n                            href={`/profile/${growData.attributes.creator_id}`}\r\n                            onClick={(e) => {\r\n                                e.preventDefault();\r\n                                history.push(\r\n                                    `/profile/${growData.attributes.creator_id}`\r\n                                );\r\n                            }}\r\n                        >\r\n                            <h3>{`${growData.attributes.creator.fname} ${growData.attributes.creator.lname}`}</h3>\r\n                        </Link>\r\n                        <h3>\r\n                            {growData.attributes.Shape__Area.toLocaleString(\r\n                                undefined,\r\n                                {\r\n                                    maximumFractionDigits: 2,\r\n                                }\r\n                            )}{\" \"}\r\n                            sqm\r\n                        </h3>\r\n                        <h3>\r\n                            {\r\n                                fields\r\n                                    .filter(\r\n                                        (field) =>\r\n                                            field.name === \"plantation_type\"\r\n                                    )[0]\r\n                                    .domain.codedValues.filter(\r\n                                        (codedValue) =>\r\n                                            codedValue.code ===\r\n                                            growData.attributes.plantation_type\r\n                                    )[0].name\r\n                            }\r\n                        </h3>\r\n                        <h3>\r\n                            {new Date(\r\n                                growData.attributes.start_time\r\n                            ).toLocaleDateString()}{\" \"}\r\n                            -{\" \"}\r\n                            {new Date(\r\n                                growData.attributes.end_time\r\n                            ).toLocaleDateString()}\r\n                        </h3>\r\n                        <h3>{growData.attributes.expected_yield}</h3>\r\n                        <OneGrowScene\r\n                            id={`grow_${growId}`}\r\n                            data={growData}\r\n                            fields={fields}\r\n                        />\r\n                    </InfoColumn>\r\n                    <UpdatesColumn>\r\n                        <TitleContainer>\r\n                            <h3\r\n                                style={{\r\n                                    textAlign: \"center\",\r\n                                    color: \"#6FC6DF\",\r\n                                }}\r\n                            >\r\n                                Updates\r\n                            </h3>\r\n                            {(() => {\r\n                                if (\r\n                                    currentUser &&\r\n                                    currentUser.uid ===\r\n                                        growData.attributes.creator_id\r\n                                ) {\r\n                                    return (\r\n                                        <StyledButton\r\n                                            onClick={() => {\r\n                                                openDataCollection();\r\n                                            }}\r\n                                        >\r\n                                            Add Update\r\n                                        </StyledButton>\r\n                                    );\r\n                                }\r\n                            })()}\r\n                        </TitleContainer>\r\n                        {(() => {\r\n                            if (growUpdateBadges.length > 0)\r\n                                return growUpdateBadges;\r\n                            else\r\n                                return (\r\n                                    <p\r\n                                        style={{\r\n                                            color: \"white\",\r\n                                            textAlign: \"center\",\r\n                                        }}\r\n                                    >\r\n                                        No Updates Yet\r\n                                    </p>\r\n                                );\r\n                        })()}\r\n                    </UpdatesColumn>\r\n                </PageContainer>\r\n                <ModalStyled\r\n                    open={dataCollectionIsOpen}\r\n                    onClose={handleDataCollectionClose}\r\n                >\r\n                    <StylediFrame\r\n                        src={window.config.updates.survey.replace(\r\n                            \"{growid}\",\r\n                            growId\r\n                        )}\r\n                    ></StylediFrame>\r\n                </ModalStyled>\r\n            </Container>\r\n        );\r\n    } else {\r\n        return (\r\n            <Container>\r\n                <Navbar history={history} />\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nexport default withRouter(GrowScreen);\r\n","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\GrowScreen\\styles.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\UpdateBadge\\index.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\UpdateBadge\\UpdateBadge.js",["278"],"import React, { useState, useEffect } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport { Container, InfoContainer, Title, InfoPiece } from \"./styles\";\r\n\r\nconst UpdateBadge = (props) => {\r\n    const [attachmentUrl, setAttachmentUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const loadAttachment = async () => {\r\n            fetch(\r\n                `${window.config.updates.url}/${props.data.attributes.objectid}/attachments?f=json`\r\n            )\r\n                .then((response) => response.json())\r\n                .then((result) => {\r\n                    if (result.attachmentInfos.length > 0) {\r\n                        setAttachmentUrl(\r\n                            `${window.config.updates.url}/${props.data.attributes.objectid}/attachments/${result.attachmentInfos[0].id}`\r\n                        );\r\n                    }\r\n                });\r\n        };\r\n        if (props.data.attributes.objectid) {\r\n            loadAttachment();\r\n        }\r\n    }, [props.data.attributes.objectid]);\r\n\r\n    return (\r\n        <Container>\r\n            <InfoContainer>\r\n                <Title>{props.data.attributes.title}</Title>\r\n                <InfoPiece>\r\n                    {new Date(\r\n                        props.data.attributes.CreationDate\r\n                    ).toLocaleDateString()} at {new Date(\r\n                        props.data.attributes.CreationDate\r\n                    ).toLocaleTimeString()}\r\n                </InfoPiece>\r\n                {(() => {\r\n                    if (attachmentUrl) {\r\n                        return (\r\n                            <img\r\n                                src={attachmentUrl}\r\n                                style={{ width: \"100%\" }}\r\n                            />\r\n                        );\r\n                    }\r\n                })()}\r\n                {(() => {\r\n                    if (props.data.attributes.message) {\r\n                        return (\r\n                            <InfoPiece>\r\n                                {props.data.attributes.message}\r\n                            </InfoPiece>\r\n                        );\r\n                    } else return null;\r\n                })()}\r\n            </InfoContainer>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(UpdateBadge);\r\n","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\UpdateBadge\\styles.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\OneGrowScene\\index.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\OneGrowScene\\OneGrowScene.js",["279"],"import React, { useEffect } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { loadModules } from \"esri-loader\";\r\n\r\nimport {} from \"./styles\";\r\n\r\nconst OneGrowScene = (props) => {\r\n    useEffect(() => {\r\n        document.getElementById(`grow-scene-${props.id}`).style.height =\r\n            document.getElementById(`grow-scene-${props.id}`).clientWidth +\r\n            \"px\";\r\n        loadModules([\r\n            \"esri/views/SceneView\",\r\n            \"esri/WebScene\",\r\n            \"esri/geometry/Polygon\",\r\n            \"esri/Graphic\",\r\n        ])\r\n            .then(([SceneView, WebScene, Polygon, Graphic]) => {\r\n                const scene = new WebScene({\r\n                    portalItem: {\r\n                        id: window.config.baseSceneId,\r\n                    },\r\n                });\r\n                const view = new SceneView({\r\n                    map: scene,\r\n                    container: `grow-scene-${props.id}`,\r\n                });\r\n\r\n                view.when(() => {\r\n                    const growPoint = props.data.geometry.centroid;\r\n                    growPoint.z = props.data.attributes.height || 50;\r\n                    view.graphics.add(\r\n                        new Graphic({\r\n                            geometry: growPoint,\r\n                            symbol: {\r\n                                type: \"picture-marker\",\r\n                                url: `https://hydroponics-app-f7956.web.app/img/${\r\n                                    props.fields\r\n                                        .filter(\r\n                                            (field) =>\r\n                                                field.name === \"plant_type\"\r\n                                        )[0]\r\n                                        .domain.codedValues.filter(\r\n                                            (codedValue) =>\r\n                                                codedValue.code ===\r\n                                                props.data.attributes.plant_type\r\n                                        )[0].name.toLowerCase().replace(/ /g,\"\")\r\n                                }.svg`,\r\n                            },\r\n                        })\r\n                    );\r\n                    view.goTo({ target: growPoint, zoom: 20 });\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            });\r\n    }, []);\r\n\r\n    return <div id={`grow-scene-${props.id}`}></div>;\r\n};\r\n\r\nexport default withRouter(OneGrowScene);\r\n","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\OneGrowScene\\styles.js",["280"],"import styled from \"styled-components\";\r\n\r\nexport {};\r\n","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\NewGrowScreen\\index.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\NewGrowScreen\\NewGrowScreen.js",["281"],"import React, { useEffect, useContext, useState } from \"react\";\r\nimport { withRouter, Redirect } from \"react-router\";\r\nimport { AuthContext } from \"../Auth\";\r\n\r\nimport { Container } from \"./styles\";\r\nimport Navbar from \"../Navbar\";\r\nimport NewGrowMap from \"../NewGrowMap\";\r\nimport GrowWizard from \"../GrowWizard\";\r\nimport DrawPolygonWStep from \"../DrawPolygonWStep\";\r\nimport SelectPTypeWStep from \"../SelectPTypeWStep\";\r\nimport PlantRecWStep from \"../PlantRecWStep\";\r\nimport CreateGrowWStep from \"../CreateGrowWStep\";\r\n\r\nconst NewGrowScreen = (props) => {\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    const [selectState, setSelectState] = useState(-1);\r\n    const [AoI, setAoI] = useState(null);\r\n    const [plantationType, setPlantationType] = useState(1);\r\n    const [plantInfo, setPlantInfo] = useState(null);\r\n\r\n    if (!currentUser) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    const selectionComplete = (area) => {\r\n        setSelectState(1);\r\n        setAoI(area);\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <Navbar history={props.history} />\r\n            <NewGrowMap\r\n                selectState={selectState}\r\n                onSelectionComplete={selectionComplete}\r\n            />\r\n            <GrowWizard>\r\n                <DrawPolygonWStep\r\n                    onSelectClicked={() => {\r\n                        setSelectState(0);\r\n                    }}\r\n                    selectState={selectState}\r\n                />\r\n                <SelectPTypeWStep\r\n                    onChange={(type) => {\r\n                        setPlantationType(type);\r\n                    }}\r\n                />\r\n                <PlantRecWStep\r\n                    AoI={AoI}\r\n                    PType={plantationType}\r\n                    onPlantSelection={setPlantInfo}\r\n                />\r\n                <CreateGrowWStep\r\n                    AoI={AoI}\r\n                    PType={plantationType}\r\n                    plantInfo={plantInfo}\r\n                    creatorId={currentUser.uid}\r\n                    history={props.history}\r\n                />\r\n            </GrowWizard>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(NewGrowScreen);\r\n","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\NewGrowScreen\\styles.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\NewGrowMap\\index.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\NewGrowMap\\NewGrowMap.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\NewGrowMap\\styles.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\GrowWizard\\index.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\GrowWizard\\GrowWizard.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\GrowWizard\\styles.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\DrawPolygonWStep\\index.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\DrawPolygonWStep\\DrawPolygonWStep.js",["282"],"import React, { useState } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport {\r\n    Container,\r\n    Header,\r\n    Content,\r\n    Footer,\r\n    SelectionButton,\r\n    CompletionButton,\r\n} from \"./styles\";\r\n\r\nconst DrawPolygonWStep = (props) => {\r\n    return (\r\n        <Container>\r\n            <Header>Area Selection</Header>\r\n            <Content style={{ textAlign: \"center\" }}>\r\n                <p style={{ color: \"white\" }}>\r\n                    Hi! Select an area to get started.\r\n                </p>\r\n                {(() => {\r\n                    if (props.selectState === 0) {\r\n                        return (\r\n                            <p style={{ color: \"white\" }}>\r\n                                Now Draw on the Map\r\n                            </p>\r\n                        );\r\n                    } else if (props.selectState === 1) {\r\n                        return (\r\n                            <span>\r\n                                <p style={{ color: \"white\" }}>\r\n                                    An Area is Selected\r\n                                </p>\r\n                                <SelectionButton\r\n                                    onClick={props.onSelectClicked}\r\n                                >\r\n                                    New Selection\r\n                                </SelectionButton>\r\n                            </span>\r\n                        );\r\n                    } else {\r\n                        return (\r\n                            <SelectionButton onClick={props.onSelectClicked}>\r\n                                Select\r\n                            </SelectionButton>\r\n                        );\r\n                    }\r\n                })()}\r\n            </Content>\r\n            {(() => {\r\n                if (props.selectState === 1) {\r\n                    return (\r\n                        <Footer style={{ justifyItems: \"right\" }}>\r\n                            <CompletionButton onClick={props.onComplete}>\r\n                                Next\r\n                            </CompletionButton>\r\n                        </Footer>\r\n                    );\r\n                }\r\n            })()}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(DrawPolygonWStep);\r\n","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\DrawPolygonWStep\\styles.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\SelectPTypeWStep\\index.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\SelectPTypeWStep\\SelectPTypeWStep.js",["283","284"],"import React, { useState } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport {\r\n    Container,\r\n    Header,\r\n    Content,\r\n    Footer,\r\n    SelectionButton,\r\n    CompletionButton,\r\n} from \"./styles\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\n\r\nconst SelectPTypeWStep = (props) => {\r\n    const [value, setValue] = React.useState(1);\r\n\r\n    return (\r\n        <Container>\r\n            <Header>Type Selection</Header>\r\n            <Content style={{ textAlign: \"center\" }}>\r\n                <p style={{ color: \"white\" }}>\r\n                    Please select the type of hydroponic planting you want to\r\n                    do.\r\n                </p>\r\n                <FormControl component=\"fieldset\">\r\n                    <RadioGroup\r\n                        value={value}\r\n                        name=\"radio-buttons-group\"\r\n                        onChange={(a, b) => {\r\n                            setValue(parseInt(b));\r\n                            props.onChange(parseInt(b));\r\n                        }}\r\n                    >\r\n                        <FormControlLabel\r\n                            value={1}\r\n                            control={<Radio />}\r\n                            label=\"Tower\"\r\n                        />\r\n                        <FormControlLabel\r\n                            value={2}\r\n                            control={<Radio />}\r\n                            label=\"Stack\"\r\n                        />\r\n                        <FormControlLabel\r\n                            value={3}\r\n                            control={<Radio />}\r\n                            label=\"Wick\"\r\n                        />\r\n                    </RadioGroup>\r\n                </FormControl>\r\n            </Content>\r\n            <Footer style={{ justifyItems: \"right\" }}>\r\n                <CompletionButton onClick={props.onComplete}>\r\n                    Next\r\n                </CompletionButton>\r\n            </Footer>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(SelectPTypeWStep);\r\n","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\SelectPTypeWStep\\styles.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\PlantRecWStep\\index.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\PlantRecWStep\\PlantRecWStep.js",["285","286","287","288"],"import React, { useState, useEffect } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { loadModules } from \"esri-loader\";\r\n\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport {\r\n    Container,\r\n    Header,\r\n    Content,\r\n    Footer,\r\n    SelectionButton,\r\n    CompletionButton,\r\n} from \"./styles\";\r\nimport PlantOption from \"../PlantOption/PlantOption\";\r\n\r\nconst PlantRecWStep = (props) => {\r\n    const [plants, setPlants] = useState(null);\r\n\r\n    useEffect(() => {\r\n        loadModules([\r\n            \"esri/config\",\r\n            \"esri/tasks/QueryTask\",\r\n            \"esri/geometry/Polygon\",\r\n            \"esri/request\",\r\n            \"esri/geometry/geometryEngine\",\r\n        ]).then(\r\n            async ([\r\n                esriConfig,\r\n                QueryTask,\r\n                Polygon,\r\n                esriRequest,\r\n                geometryEngine,\r\n            ]) => {\r\n                esriConfig.apiKey =\r\n                    \"AAPK899137865cec4381bb28e1be78781355JyLIcqwK0HIoBzhsp1KZbYnO5LdjRFn9OHvAoZZfFFhjPoGLg6wQWpmiTBQGZMPv\";\r\n\r\n                const growMidDate = new Date(\r\n                    new Date().getTime() + 10 * 24 * 60 * 60 * 1000\r\n                );\r\n\r\n                const AoI = new Polygon(props.AoI);\r\n                const AoICenter = new Polygon(props.AoI).centroid;\r\n\r\n                const tempTask = new QueryTask({\r\n                    url: window.config.tempLayer.url,\r\n                });\r\n                const tempResult = await tempTask.execute({\r\n                    geometry: props.AoI,\r\n                    outFields:\r\n                        window.config.tempLayer.fields[growMidDate.getMonth()],\r\n                    geometryType: \"esriGeometryPolygon\",\r\n                    inSR: props.AoI.spatialReference,\r\n                });\r\n                const tempVal =\r\n                    tempResult.features[0].attributes[\r\n                        window.config.tempLayer.fields[growMidDate.getMonth()]\r\n                    ];\r\n\r\n                const solarResult = await esriRequest(\r\n                    `${window.config.solarLayer.url}/identify`,\r\n                    {\r\n                        query: {\r\n                            f: \"json\",\r\n                            geometryType: \"esriGeometryPoint\",\r\n                            geometry: JSON.stringify({\r\n                                type: \"point\",\r\n                                x: AoICenter.x,\r\n                                y: AoICenter.y,\r\n                                spatialReference: props.AoI.spatialReference,\r\n                            }),\r\n                            renderingRules: `[{\"rasterFunction\":\"Direct normal irradiation\"}]`,\r\n                            returnPixelValues: true,\r\n                            returnUnformattedValues: true,\r\n                            returnCatalogItems: false,\r\n                        },\r\n                    }\r\n                );\r\n\r\n                let solarVal = parseInt(solarResult.data.processedValues[0]);\r\n                solarVal =\r\n                    solarVal > window.config.solarLayer.cutoffs.medium &&\r\n                    solarVal < window.config.solarLayer.cutoffs.high\r\n                        ? \"MEDIUM\"\r\n                        : solarVal > window.config.solarLayer.cutoffs.high\r\n                        ? \"HIGH\"\r\n                        : \"LOW\";\r\n\r\n                const plantTask = new QueryTask({\r\n                    url: window.config.plantLayer.url,\r\n                });\r\n\r\n                let plants = await plantTask.execute({\r\n                    where: \"1=1\",\r\n                    outFields: \"*\",\r\n                });\r\n\r\n                plants = plants.features;\r\n\r\n                let plantationInfo = {\r\n                    width: 1.35,\r\n                    height: 1.35,\r\n                    ports: 28,\r\n                };\r\n\r\n                if (props.PType === 2) {\r\n                    plantationInfo = {\r\n                        width: 1,\r\n                        height: 0.55,\r\n                        ports: 144,\r\n                    };\r\n                } else if (props.PType === 3) {\r\n                    plantationInfo = {\r\n                        width: 1,\r\n                        height: 0.55,\r\n                        ports: 18,\r\n                    };\r\n                }\r\n\r\n                plants.forEach((plant) => {\r\n                    plant.attributes.recommended =\r\n                        plant.attributes.DAY_TEMP_HIGH_FAR >= tempVal &&\r\n                        tempVal <= plant.attributes.DAY_TEMP_LOW_FAR &&\r\n                        plant.attributes.SUN_INTENSITY === solarVal;\r\n\r\n                    const plantationCount =\r\n                        geometryEngine.planarArea(AoI, \"square-meters\") /\r\n                        (plantationInfo.width * plantationInfo.height);\r\n                    const capacity = plantationInfo.ports * plantationCount;\r\n                    plant.attributes.EX_YIELD = Math.ceil(\r\n                        capacity * 1.3 - capacity * 1.3 * 0.02\r\n                    );\r\n                });\r\n\r\n                setPlants(plants);\r\n            }\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <Container>\r\n            <Header>Plant Selection</Header>\r\n            <Content style={{ textAlign: \"center\" }}>\r\n                {(() => {\r\n                    if (!plants) {\r\n                        return (\r\n                            <span>\r\n                                <p style={{ color: \"white\" }}>\r\n                                    Hang on! We're figuring out the best plants\r\n                                    for you.\r\n                                </p>\r\n                                <CircularProgress />\r\n                            </span>\r\n                        );\r\n                    } else {\r\n                        return plants\r\n                            .filter((a) => a.attributes.plant_type !== 0)\r\n                            .sort((a, b) => {\r\n                                if (\r\n                                    a.attributes.recommended &&\r\n                                    !b.attributes.recommended\r\n                                ) {\r\n                                    return -1;\r\n                                } else if (\r\n                                    b.attributes.recommended &&\r\n                                    !a.attributes.recommended\r\n                                ) {\r\n                                    return 1;\r\n                                } else {\r\n                                    if (\r\n                                        a.attributes.GROW_PERIOD <\r\n                                        b.attributes.GROW_PERIOD\r\n                                    ) {\r\n                                        return -1;\r\n                                    } else if (\r\n                                        b.attributes.GROW_PERIOD <\r\n                                        a.attributes.GROW_PERIOD\r\n                                    ) {\r\n                                        return 1;\r\n                                    } else {\r\n                                        if (\r\n                                            a.attributes.CROP <\r\n                                            b.attributes.CROP\r\n                                        ) {\r\n                                            return -1;\r\n                                        } else if (\r\n                                            b.attributes.CROP <\r\n                                            a.attributes.CROP\r\n                                        ) {\r\n                                            return 1;\r\n                                        } else {\r\n                                            return 0;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })\r\n                            .map((plant, i) => (\r\n                                <PlantOption\r\n                                    data={plant.attributes}\r\n                                    key={`plant_option_${i}_${plant.attributes.plant_type}`}\r\n                                    onSelect={(plantInfo) => {\r\n                                        props.onPlantSelection({\r\n                                            ...plantInfo                                            \r\n                                        });\r\n                                        props.onComplete();\r\n                                    }}\r\n                                />\r\n                            ));\r\n                    }\r\n                })()}\r\n            </Content>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(PlantRecWStep);\r\n","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\PlantRecWStep\\styles.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\PlantOption\\PlantOption.js",["289","290"],"import React, { useState, useEffect } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\nimport { Container, InfoContainer, Title, InfoPiece } from \"./styles\";\r\n\r\nconst PlantOption = (props) => {\r\n    return (\r\n        <Link\r\n            onClick={(e) => {\r\n                e.preventDefault();\r\n                props.onSelect({\r\n                    plantType: props.data.plant_type,\r\n                    growPeriod: props.data.GROW_PERIOD,\r\n                    exYield: props.data.EX_YIELD,\r\n                });\r\n            }}\r\n        >\r\n            <Container>\r\n                <img\r\n                    src={`https://hydroponics-app-f7956.web.app/img/${props.data.CROP.toLowerCase().replace(\r\n                        / /g,\r\n                        \"\"\r\n                    )}.svg`}\r\n                    alt={props.data.CROP}\r\n                    width=\"50\"\r\n                />\r\n                <InfoContainer>\r\n                    <Title>{props.data.CROP}</Title>\r\n                    {(() => {\r\n                        if (props.data.recommended) {\r\n                            return (\r\n                                <InfoPiece style={{ color: \"#9FC73B\" }}>\r\n                                    Recommended\r\n                                </InfoPiece>\r\n                            );\r\n                        }\r\n                    })()}\r\n                    <InfoPiece>\r\n                        Growth Period: {props.data.GROW_PERIOD} Days\r\n                    </InfoPiece>\r\n                    <InfoPiece>Expected Yield: {props.data.EX_YIELD}</InfoPiece>\r\n                </InfoContainer>\r\n            </Container>\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default withRouter(PlantOption);\r\n","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\PlantOption\\styles.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\CreateGrowWStep\\index.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\CreateGrowWStep\\CreateGrowWStep.js",["291","292"],"import React, { useState, useEffect } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { loadModules } from \"esri-loader\";\r\n\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport { Container, Header, Content } from \"./styles\";\r\n\r\nconst PlantRecWStep = (props) => {\r\n    useEffect(() => {\r\n        loadModules([\r\n            \"esri/tasks/QueryTask\",\r\n            \"esri/geometry/Polygon\",\r\n            \"esri/request\",\r\n        ]).then(async ([QueryTask, Polygon, esriRequest]) => {\r\n            const heightTask = new QueryTask({\r\n                url: window.config.roofLayer.url,\r\n            });\r\n            const heightResult = await heightTask.execute({\r\n                geometry: props.AoI,\r\n                outFields: window.config.roofLayer.heightField,\r\n                geometryType: \"esriGeometryPolygon\",\r\n                inSR: props.AoI.spatialReference,\r\n            });\r\n            const heightVal = Math.ceil(\r\n                heightResult.features[0].attributes[\r\n                    window.config.roofLayer.heightField\r\n                ]\r\n            );\r\n\r\n            esriRequest(`${window.config.growsLayer.url}/addFeatures`, {\r\n                query: {\r\n                    f: \"json\",\r\n                    features: JSON.stringify([\r\n                        {\r\n                            geometry: new Polygon(props.AoI),\r\n                            attributes: {\r\n                                start_time: new Date().getTime(),\r\n                                end_time: new Date(\r\n                                    new Date().getTime() +\r\n                                        props.plantInfo.growPeriod *\r\n                                            24 *\r\n                                            60 *\r\n                                            60 *\r\n                                            1000\r\n                                ).getTime(),\r\n                                plant_type: props.plantInfo.plantType,\r\n                                expected_yield: props.plantInfo.exYield,\r\n                                height: heightVal,\r\n                                plantation_type: props.PType,\r\n                                creator_id: props.creatorId,\r\n                            },\r\n                        },\r\n                    ]),\r\n                },\r\n                method: \"post\",\r\n            }).then((result) => {\r\n                props.history.push(\r\n                    `/grow/${result.data.addResults[0].objectId}`\r\n                );\r\n            });\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <Container>\r\n            <Header>Creating Grow</Header>\r\n            <Content style={{ textAlign: \"center\" }}>\r\n                <span>\r\n                    <p style={{ color: \"white\" }}>\r\n                        Congratulations! We're starting your grow.\r\n                    </p>\r\n                    <CircularProgress />\r\n                </span>\r\n            </Content>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(PlantRecWStep);\r\n","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\CreateGrowWStep\\styles.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\MyGrowsScene\\index.js",[],"C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\MyGrowsScene\\MyGrowsScene.js",["293"],"import React, { useEffect } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { loadModules } from \"esri-loader\";\r\n\r\nimport {} from \"./styles\";\r\n\r\nconst MyGrowsScene = (props) => {\r\n    const creatorId = props.creatorId;\r\n\r\n    useEffect(() => {\r\n        document.getElementById(`grow-scene-${creatorId}`).style.height =\r\n            document.getElementById(`grow-scene-${creatorId}`).clientWidth +\r\n            \"px\";\r\n        loadModules([\r\n            \"esri/views/SceneView\",\r\n            \"esri/WebScene\",\r\n            \"esri/geometry/Polygon\",\r\n            \"esri/Graphic\",\r\n            \"esri/tasks/QueryTask\",\r\n        ])\r\n            .then(([SceneView, WebScene, Polygon, Graphic, QueryTask]) => {\r\n                const scene = new WebScene({\r\n                    portalItem: {\r\n                        id: window.config.baseSceneId,\r\n                    },\r\n                });\r\n                const view = new SceneView({\r\n                    map: scene,\r\n                    container: `grow-scene-${creatorId}`,\r\n                });\r\n\r\n                view.when(() => {\r\n                    const growsTask = new QueryTask({\r\n                        url: window.config.growsLayer.url,\r\n                    });\r\n\r\n                    growsTask\r\n                        .execute({\r\n                            where: `creator_id = '${creatorId}' and end_time > DATE '${new Date().getFullYear()}-${(\r\n                                \"\" +\r\n                                (new Date().getMonth() + 1)\r\n                            ).padStart(2, \"0\")}-${\r\n                                \"\" + (new Date().getDate() + 1)\r\n                            }'`,\r\n                            outFields: \"*\",\r\n                            returnGeometry: true,\r\n                        })\r\n                        .then((result) => {\r\n                            const graphics = [];\r\n                            result.features.forEach((feature) => {\r\n                                feature.geometry = feature.geometry.centroid;\r\n                                feature.geometry.z = feature.attributes.height;\r\n                                graphics.push(\r\n                                    new Graphic({\r\n                                        geometry: feature.geometry,\r\n                                        symbol: {\r\n                                            type: \"picture-marker\",\r\n                                            url: `https://hydroponics-app-f7956.web.app/img/${result.fields\r\n                                                .filter(\r\n                                                    (field) =>\r\n                                                        field.name ===\r\n                                                        \"plant_type\"\r\n                                                )[0]\r\n                                                .domain.codedValues.filter(\r\n                                                    (codedValue) =>\r\n                                                        codedValue.code ===\r\n                                                        feature.attributes\r\n                                                            .plant_type\r\n                                                )[0]\r\n                                                .name.toLowerCase().replace(/ /g,\"\")}.svg`,\r\n                                            width: \"16px\",\r\n                                            height: \"16px\",\r\n                                        },\r\n                                    })\r\n                                );\r\n                            });\r\n\r\n                            view.graphics.addMany(graphics);\r\n\r\n                            view.goTo(graphics);\r\n                        });\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <div id={`grow-scene-${creatorId}`} style={{ marginTop: \"10px\" }}></div>\r\n    );\r\n};\r\n\r\nexport default withRouter(MyGrowsScene);\r\n","C:\\Users\\ahme8608\\Documents\\Hack The Map 5\\webapp\\src\\MyGrowsScene\\styles.js",["294"],{"ruleId":"295","replacedBy":"296"},{"ruleId":"297","replacedBy":"298"},{"ruleId":"295","replacedBy":"299"},{"ruleId":"297","replacedBy":"300"},{"ruleId":"301","severity":1,"message":"302","line":104,"column":8,"nodeType":"303","endLine":104,"endColumn":10,"suggestions":"304"},{"ruleId":"301","severity":1,"message":"305","line":46,"column":9,"nodeType":"303","endLine":46,"endColumn":18,"suggestions":"306"},{"ruleId":"307","severity":1,"message":"308","line":6,"column":8,"nodeType":"309","messageId":"310","endLine":6,"endColumn":12},{"ruleId":"307","severity":1,"message":"311","line":8,"column":8,"nodeType":"309","messageId":"310","endLine":8,"endColumn":12},{"ruleId":"307","severity":1,"message":"312","line":1,"column":17,"nodeType":"309","messageId":"310","endLine":1,"endColumn":25},{"ruleId":"307","severity":1,"message":"313","line":1,"column":27,"nodeType":"309","messageId":"310","endLine":1,"endColumn":36},{"ruleId":"301","severity":1,"message":"314","line":96,"column":8,"nodeType":"303","endLine":96,"endColumn":16,"suggestions":"315"},{"ruleId":"316","severity":1,"message":"317","line":42,"column":29,"nodeType":"318","endLine":45,"endColumn":31},{"ruleId":"301","severity":1,"message":"319","line":58,"column":8,"nodeType":"303","endLine":58,"endColumn":10,"suggestions":"320"},{"ruleId":"307","severity":1,"message":"321","line":1,"column":8,"nodeType":"309","messageId":"310","endLine":1,"endColumn":14},{"ruleId":"307","severity":1,"message":"313","line":1,"column":17,"nodeType":"309","messageId":"310","endLine":1,"endColumn":26},{"ruleId":"307","severity":1,"message":"312","line":1,"column":17,"nodeType":"309","messageId":"310","endLine":1,"endColumn":25},{"ruleId":"307","severity":1,"message":"312","line":1,"column":17,"nodeType":"309","messageId":"310","endLine":1,"endColumn":25},{"ruleId":"307","severity":1,"message":"322","line":9,"column":5,"nodeType":"309","messageId":"310","endLine":9,"endColumn":20},{"ruleId":"307","severity":1,"message":"323","line":11,"column":5,"nodeType":"309","messageId":"310","endLine":11,"endColumn":11},{"ruleId":"307","severity":1,"message":"322","line":12,"column":5,"nodeType":"309","messageId":"310","endLine":12,"endColumn":20},{"ruleId":"307","severity":1,"message":"324","line":13,"column":5,"nodeType":"309","messageId":"310","endLine":13,"endColumn":21},{"ruleId":"301","severity":1,"message":"325","line":138,"column":8,"nodeType":"303","endLine":138,"endColumn":10,"suggestions":"326"},{"ruleId":"307","severity":1,"message":"312","line":1,"column":17,"nodeType":"309","messageId":"310","endLine":1,"endColumn":25},{"ruleId":"307","severity":1,"message":"313","line":1,"column":27,"nodeType":"309","messageId":"310","endLine":1,"endColumn":36},{"ruleId":"307","severity":1,"message":"312","line":1,"column":17,"nodeType":"309","messageId":"310","endLine":1,"endColumn":25},{"ruleId":"301","severity":1,"message":"327","line":63,"column":8,"nodeType":"303","endLine":63,"endColumn":10,"suggestions":"328"},{"ruleId":"301","severity":1,"message":"329","line":87,"column":8,"nodeType":"303","endLine":87,"endColumn":10,"suggestions":"330"},{"ruleId":"307","severity":1,"message":"321","line":1,"column":8,"nodeType":"309","messageId":"310","endLine":1,"endColumn":14},"no-native-reassign",["331"],"no-negated-in-lhs",["332"],["331"],["332"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.","ArrayExpression",["333"],"React Hook useCallback has an unnecessary dependency: 'history'. Either exclude it or remove the dependency array.",["334"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'getGrowUpdates'. Either include it or remove the dependency array.",["335"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'props.data.attributes.height', 'props.data.attributes.plant_type', 'props.data.geometry.centroid', 'props.fields', and 'props.id'. Either include them or remove the dependency array.",["336"],"'styled' is defined but never used.","'SelectionButton' is defined but never used.","'Footer' is defined but never used.","'CompletionButton' is defined but never used.","React Hook useEffect has missing dependencies: 'props.AoI' and 'props.PType'. Either include them or remove the dependency array.",["337"],"React Hook useEffect has missing dependencies: 'props.AoI', 'props.PType', 'props.creatorId', 'props.history', 'props.plantInfo.exYield', 'props.plantInfo.growPeriod', and 'props.plantInfo.plantType'. Either include them or remove the dependency array.",["338"],"React Hook useEffect has a missing dependency: 'creatorId'. Either include it or remove the dependency array.",["339"],"no-global-assign","no-unsafe-negation",{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},"Update the dependencies array to be: [props.history]",{"range":"354","text":"355"},"Update the dependencies array to be: []",{"range":"356","text":"357"},"Update the dependencies array to be: [getGrowUpdates, growId]",{"range":"358","text":"359"},"Update the dependencies array to be: [props.data.attributes.height, props.data.attributes.plant_type, props.data.geometry.centroid, props.fields, props.id]",{"range":"360","text":"361"},"Update the dependencies array to be: [props.AoI, props.PType]",{"range":"362","text":"363"},"Update the dependencies array to be: [props.AoI, props.PType, props.creatorId, props.history, props.plantInfo.exYield, props.plantInfo.growPeriod, props.plantInfo.plantType]",{"range":"364","text":"365"},"Update the dependencies array to be: [creatorId]",{"range":"366","text":"367"},[4704,4706],"[props.history]",[1473,1482],"[]",[3286,3294],"[getGrowUpdates, growId]",[2413,2415],"[props.data.attributes.height, props.data.attributes.plant_type, props.data.geometry.centroid, props.fields, props.id]",[5162,5164],"[props.AoI, props.PType]",[2579,2581],"[props.AoI, props.PType, props.creatorId, props.history, props.plantInfo.exYield, props.plantInfo.growPeriod, props.plantInfo.plantType]",[3902,3904],"[creatorId]"]