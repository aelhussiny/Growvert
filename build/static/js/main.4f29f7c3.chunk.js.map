{"version":3,"sources":["firebase.js","Auth.js","theme.js","img/logo.svg","Navbar/styles.js","Navbar/Navbar.js","Navbar/index.js","LoginScreen/styles.js","LoginScreen/LoginScreen.js","LoginScreen/index.js","AllGrowsScreen/styles.js","AllGrowsScreen/index.js","AllGrowsScreen/AllGrowsScreen.js","ProfileScreen/styles.js","GrowBadge/styles.js","GrowBadge/index.js","GrowBadge/GrowBadge.js","MyGrowsScene/index.js","MyGrowsScene/MyGrowsScene.js","ProfileScreen/ProfileScreen.js","ProfileScreen/index.js","RegisterScreen/styles.js","RegisterScreen/RegisterScreen.js","RegisterScreen/index.js","ForgotPassScreen/styles.js","ForgotPassScreen/ForgotPassScreen.js","ForgotPassScreen/index.js","UpdateBadge/styles.js","UpdateBadge/UpdateBadge.js","UpdateBadge/index.js","GrowScreen/styles.js","OneGrowScene/index.js","OneGrowScene/OneGrowScene.js","GrowScreen/GrowScreen.js","GrowScreen/index.js","NewGrowScreen/styles.js","NewGrowMap/styles.js","NewGrowMap/NewGrowMap.js","NewGrowMap/index.js","GrowWizard/styles.js","GrowWizard/index.js","GrowWizard/GrowWizard.js","DrawPolygonWStep/styles.js","DrawPolygonWStep/index.js","DrawPolygonWStep/DrawPolygonWStep.js","SelectPTypeWStep/styles.js","SelectPTypeWStep/index.js","SelectPTypeWStep/SelectPTypeWStep.js","PlantRecWStep/styles.js","PlantOption/styles.js","PlantOption/PlantOption.js","PlantRecWStep/PlantRecWStep.js","PlantRecWStep/index.js","CreateGrowWStep/styles.js","CreateGrowWStep/CreateGrowWStep.js","CreateGrowWStep/index.js","NewGrowScreen/index.js","NewGrowScreen/NewGrowScreen.js","App.js","index.js"],"names":["app","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","AuthContext","React","createContext","AuthProvider","children","useState","currentUser","setCurrentUser","useEffect","auth","onAuthStateChanged","Provider","value","theme","createTheme","palette","primary","main","dark","contrastText","secondar","uiRed","esriGreen","esriBlue","NavbarContainer","styled","div","LinkDiv","props","active","StyledMenu","Menu","withRouter","useContext","userData","setUserData","getUserData","a","db","firestore","collection","doc","uid","get","dbUserData","exists","data","anchorEl","setAnchorEl","isMenuOpen","Boolean","handleMenuClose","AppBar","position","style","background","Toolbar","Link","href","onClick","e","preventDefault","history","push","color","variant","underline","display","alignItems","src","logo","alt","width","marginRight","flexGrow","justifyContent","height","location","pathname","borderBottomColor","IconButton","edge","event","currentTarget","anchorOrigin","vertical","horizontal","id","keepMounted","transformOrigin","open","onClose","MenuItem","fname","signOut","Navbar","Container","FormContainer","StyledForm","form","StyledLabel","label","StyledButton","button","handleLogin","useCallback","target","elements","email","password","signInWithEmailAndPassword","alert","to","marginBottom","marginTop","onSubmit","padding","name","type","required","placeholder","textAlign","LoginScreen","AllGrowsScreen","document","getElementById","clientWidth","loadModules","then","SceneView","WebScene","Graphic","QueryTask","view","map","portalItem","window","config","baseSceneId","container","when","url","growsLayer","execute","where","Date","getFullYear","getMonth","padStart","getDate","outFields","returnGeometry","result","graphics","features","forEach","feature","geometry","centroid","z","attributes","symbol","fields","filter","field","domain","codedValues","codedValue","code","plant_type","toLowerCase","replace","OBJECTID","USABLE","addMany","goTo","on","hitTest","response","plantResults","results","graphic","length","catch","err","console","error","PageContainer","InfoColumn","GrowsColumn","InfoContainer","Title","p","InfoPiece","GrowBadge","Shape__Area","toLocaleString","undefined","maximumFractionDigits","plantation_type","start_time","toLocaleDateString","end_time","expected_yield","MyGrowsScene","creatorId","profileId","useParams","profileData","setProfileData","growsData","setGrowsData","fieldsData","setFieldsData","getProfileData","getGrowData","creatorField","orderByFields","growBadges","grow","lname","textDecoration","ProfileScreen","handleRegister","confirmpassword","createUserWithEmailAndPassword","userCredential","user","set","minLength","RegisterScreen","handleForgotPass","sendPasswordResetEmail","ForgotPassScreen","attachmentUrl","setAttachmentUrl","loadAttachment","fetch","updates","objectid","json","attachmentInfos","title","CreationDate","toLocaleTimeString","message","UpdateBadge","UpdatesColumn","TitleContainer","Button","ModalStyled","Modal","StylediFrame","iframe","OneGrowScene","growPoint","add","zoom","growId","growData","setGrowData","updateData","setUpdateData","dataCollectionIsOpen","setDataCollectionIsOpen","getGrowUpdates","sort","b","creator_id","creator","growUpdateBadges","update","survey","GrowScreen","MapContainer","NewGrowMap","memo","setView","selectState","Draw","draw","focus","removeAll","action","create","mode","evt","vertices","polygon","rings","spatialReference","outline","createPolygonGraphic","onSelectionComplete","MapView","WebMap","Locate","Expand","Search","newGrowMapId","locate","useHeadingEnabled","goToOverride","options","scale","ui","searchWidget","searchExpand","content","index","GrowWizard","step","setStep","next","Children","child","i","cloneElement","onComplete","Header","Content","Footer","SelectionButton","CompletionButton","DrawPolygonWStep","onSelectClicked","justifyItems","SelectPTypeWStep","setValue","FormControl","component","RadioGroup","onChange","parseInt","FormControlLabel","control","Radio","onSelect","plantType","growPeriod","GROW_PERIOD","exYield","EX_YIELD","CROP","recommended","plants","setPlants","esriConfig","Polygon","esriRequest","geometryEngine","growMidDate","getTime","AoI","AoICenter","tempTask","tempLayer","geometryType","inSR","tempResult","tempVal","solarLayer","query","f","JSON","stringify","x","y","renderingRules","returnPixelValues","returnUnformattedValues","returnCatalogItems","solarResult","solarVal","processedValues","cutoffs","medium","high","plantTask","plantLayer","plantationInfo","ports","PType","plant","DAY_TEMP_HIGH_FAR","DAY_TEMP_LOW_FAR","SUN_INTENSITY","plantationCount","planarArea","capacity","Math","ceil","plantInfo","onPlantSelection","CircularProgress","PlantRecWStep","heightTask","roofLayer","heightField","heightResult","heightVal","method","addResults","objectId","CreateGrowWStep","NewGrowScreen","setSelectState","setAoI","plantationType","setPlantationType","setPlantInfo","area","App","setDefaultOptions","css","className","exact","path","ReactDOM","render"],"mappings":"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","file":"static/js/main.4f29f7c3.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDQfWa6LBuc6BQ0JRxUTLiafXvq3L1C4EQ\",\r\n    authDomain: \"hydroponics-app-f7956.firebaseapp.com\",\r\n    projectId: \"hydroponics-app-f7956\",\r\n    storageBucket: \"hydroponics-app-f7956.appspot.com\",\r\n    messagingSenderId: \"172785109690\",\r\n    appId: \"1:172785109690:web:a9fd5b3f804f0b56f25083\",\r\n    measurementId: \"G-DD8QTQ8WBT\",\r\n};\r\n\r\nconst app = firebase.initializeApp(firebaseConfig);\r\n\r\nexport default app;","import React, { useEffect, useState } from \"react\";\r\nimport app from \"./firebase\";\r\n\r\nexport const AuthContext = React.createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [currentUser, setCurrentUser] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (app ) {\r\n            app.auth().onAuthStateChanged(setCurrentUser);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ currentUser }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n","import { createTheme } from \"@material-ui/core/styles\";\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: \"#3F3F3F\",\r\n            dark: \"#2D2D2D\",\r\n            contrastText: \"#6FC6DF\",\r\n        },\r\n        secondar: {\r\n            main: \"#6FC6DF\",\r\n        },\r\n        uiRed: \"#F50057\",\r\n        esriGreen: \"#9FC73B\",\r\n        esriBlue: \"#6FC6DF\",\r\n    },\r\n});\r\n\r\nexport { theme };\r\n","export default __webpack_public_path__ + \"static/media/logo.555ac8cc.svg\";","import styled from \"styled-components\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\n\r\nconst NavbarContainer = styled.div`\r\n    width: 100%;\r\n    position: sticky;\r\n    top: 0;\r\n    z-index: 15;\r\n`;\r\n\r\nconst LinkDiv = styled.div`\r\n    display: flex;\r\n    height: Calc(100% - 3px);\r\n    align-items: center;\r\n    cursor: pointer;\r\n    &&:hover {\r\n        border-bottom: solid #5bc2f3 3px;\r\n    }\r\n    border-bottom: ${(props)=>props.active ? \"solid #5bc2f3 3px\" : \"none\"}\r\n`;\r\n\r\nconst StyledMenu = styled(Menu)`\r\n    & .MuiPaper-root {\r\n        background: #3F3F3F;\r\n        color: #6FC6DF;\r\n    }\r\n`;\r\n\r\nexport { NavbarContainer, LinkDiv, StyledMenu };\r\n","import React, { useEffect, useContext, useState } from \"react\";\r\nimport app from \"../firebase\";\r\nimport { withRouter } from \"react-router\";\r\nimport { AuthContext } from \"../Auth\";\r\n\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport logo from \"../img/logo.svg\";\r\n\r\nimport { NavbarContainer, LinkDiv, StyledMenu } from \"./styles.js\";\r\n\r\nconst Navbar = (props) => {\r\n    const { currentUser } = useContext(AuthContext);\r\n    const [userData, setUserData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const getUserData = async () => {\r\n            const db = app.firestore();\r\n            let dbUserData = await db\r\n                .collection(\"users\")\r\n                .doc(currentUser.uid)\r\n                .get();\r\n            if (dbUserData.exists) {\r\n                dbUserData = dbUserData.data();\r\n                setUserData(dbUserData);\r\n            }\r\n        };\r\n        if (currentUser) {\r\n            getUserData();\r\n        }\r\n    }, [currentUser]);\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const handleProfileMenuOpen = (event) => {\r\n        if (!currentUser) {\r\n            props.history.push(\"/login\");\r\n        } else {\r\n            setAnchorEl(event.currentTarget);\r\n        }\r\n    };\r\n    const isMenuOpen = Boolean(anchorEl);\r\n    const handleMenuClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <NavbarContainer>\r\n            <AppBar position=\"static\" style={{ background: \"#3F3F3F\" }}>\r\n                <Toolbar>\r\n                    <Link\r\n                        href=\"/\"\r\n                        onClick={(e) => {\r\n                            e.preventDefault();\r\n                            props.history.push(\"/\");\r\n                        }}\r\n                        color=\"inherit\"\r\n                        variant=\"h6\"\r\n                        underline=\"none\"\r\n                        style={{ display: \"flex\", alignItems: \"center\" }}\r\n                    >\r\n                        <img\r\n                            src={logo}\r\n                            alt=\"Logo\"\r\n                            width=\"45\"\r\n                            style={{ marginRight: \"10px\" }}\r\n                        />\r\n                        <p>\r\n                            <span style={{ color: \"#6FC6DF\" }}>Grow</span>\r\n                            <span style={{ color: \"#9FC73B\" }}>Vert</span>\r\n                        </p>\r\n                    </Link>\r\n                    <div\r\n                        style={{\r\n                            display: \"flex\",\r\n                            flexGrow: 1,\r\n                            justifyContent: \"space-evenly\",\r\n                            height: \"64px\",\r\n                        }}\r\n                    >\r\n                        <LinkDiv\r\n                            active={props.history.location.pathname === \"/all\"}\r\n                            onClick={(e) => {\r\n                                e.preventDefault();\r\n                                props.history.push(\"/all\");\r\n                            }}\r\n                        >\r\n                            <Link\r\n                                href=\"all\"\r\n                                onClick={(e) => {\r\n                                    e.preventDefault();\r\n                                    props.history.push(\"/all\");\r\n                                }}\r\n                                color=\"inherit\"\r\n                                variant=\"h6\"\r\n                                underline=\"none\"\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    alignItems: \"center\",\r\n                                }}\r\n                            >\r\n                                Active Grows\r\n                            </Link>\r\n                        </LinkDiv>\r\n                        {(() => {\r\n                            if (currentUser) {\r\n                                return (\r\n                                    <LinkDiv\r\n                                        active={\r\n                                            props.history.location.pathname ===\r\n                                            \"/new\"\r\n                                        }\r\n                                        onClick={(e) => {\r\n                                            e.preventDefault();\r\n                                            props.history.push(\"/new\");\r\n                                        }}\r\n                                        style={{\r\n                                            borderBottomColor: \"#9FC73B\",\r\n                                        }}\r\n                                    >\r\n                                        <Link\r\n                                            href=\"new\"\r\n                                            onClick={(e) => {\r\n                                                e.preventDefault();\r\n                                                props.history.push(\"/new\");\r\n                                            }}\r\n                                            color=\"inherit\"\r\n                                            variant=\"h6\"\r\n                                            underline=\"none\"\r\n                                            style={{\r\n                                                display: \"flex\",\r\n                                                alignItems: \"center\",\r\n                                                color: \"#9FC73B\",\r\n                                            }}\r\n                                        >\r\n                                            New Grow\r\n                                        </Link>\r\n                                    </LinkDiv>\r\n                                );\r\n                            }\r\n                        })()}\r\n                    </div>\r\n                    <div>\r\n                        <IconButton\r\n                            edge=\"end\"\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls=\"profilemenu\"\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleProfileMenuOpen}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <AccountCircle />\r\n                        </IconButton>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <StyledMenu\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                id=\"profilemenu\"\r\n                keepMounted\r\n                transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                open={isMenuOpen}\r\n                onClose={handleMenuClose}\r\n            >\r\n                <MenuItem\r\n                    onClick={() => {\r\n                        props.history.push(`/profile/${currentUser.uid}`);\r\n                    }}\r\n                >\r\n                    {userData ? `${userData.fname}'s` : \"Your\"} Profile\r\n                </MenuItem>\r\n                <MenuItem\r\n                    onClick={() => {\r\n                        app.auth().signOut();\r\n                        handleMenuClose();\r\n                    }}\r\n                    style={{ color: \"#F50057\" }}\r\n                >\r\n                    Sign Out\r\n                </MenuItem>\r\n            </StyledMenu>\r\n        </NavbarContainer>\r\n    );\r\n};\r\n\r\nexport default withRouter(Navbar);\r\n","import Navbar from \"./Navbar\";\r\n\r\nexport default Navbar;","import styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-grow: 1;\r\n    flex-direction: column;\r\n    background: #2D2D2D;\r\n`;\r\n\r\nconst FormContainer = styled.div`\r\n    flex-direction: column;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-grow: 1;\r\n    align-items: center;\r\n    align-content: center;\r\n    justify-items: center;\r\n    justify-content: center;\r\n`;\r\nconst StyledForm = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    background: #474747;\r\n    padding: 25px;\r\n    width: 40%;\r\n    margin-bottom: 10%;\r\n    @media (max-width: 768px) {\r\n        width: calc(100% - 70px);\r\n        padding: 20px;\r\n        margin-bottom: 40%;\r\n    }\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n    font-weight: bold;\r\n    color: #9FC73B;\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n    padding: 10px;\r\n    background: #6FC6DF;\r\n    color: white;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    border: none;\r\n`;\r\n\r\nexport { Container, StyledForm, StyledLabel, StyledButton, FormContainer };\r\n","import React, { useCallback, useContext } from \"react\";\r\nimport { withRouter, Redirect } from \"react-router\";\r\nimport Navbar from \"../Navbar\";\r\nimport app from \"../firebase\";\r\nimport { AuthContext } from \"../Auth\";\r\nimport logo from \"../img/logo.svg\";\r\n\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\nimport {\r\n    Container,\r\n    StyledForm,\r\n    StyledLabel,\r\n    StyledButton,\r\n    FormContainer,\r\n} from \"./styles\";\r\n\r\nconst LoginScreen = ({ history }) => {\r\n    const handleLogin = useCallback(\r\n        async (event) => {\r\n            event.preventDefault();\r\n            const { email, password } = event.target.elements;\r\n            try {\r\n                await app\r\n                    .auth()\r\n                    .signInWithEmailAndPassword(email.value, password.value);\r\n                history.push(\"/\");\r\n            } catch (err) {\r\n                alert(err);\r\n            }\r\n        },\r\n        [history]\r\n    );\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    if (currentUser) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Navbar history={history} />\r\n            <FormContainer>\r\n                <img src={logo} alt=\"Logo\" width=\"150\" style={{marginBottom: \"20px\", marginTop: \"20px\"}} />\r\n                <StyledForm onSubmit={handleLogin}>\r\n                    <StyledLabel>eMail Address: </StyledLabel>\r\n                    <input\r\n                        style={{ padding: \"10px\" }}\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        required\r\n                        placeholder=\"eMail\"\r\n                    />\r\n                    <br />\r\n                    <StyledLabel>Password:</StyledLabel>\r\n                    <input\r\n                        style={{ padding: \"10px\" }}\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        required\r\n                        placeholder=\"Password\"\r\n                    />\r\n                    <br />\r\n                    <StyledButton type=\"submit\">Login</StyledButton>\r\n                    <Link\r\n                        href=\"/forgotpass\"\r\n                        onClick={(e) => {\r\n                            e.preventDefault();\r\n                            history.push(\"/forgotpass\");\r\n                        }}\r\n                        style={{ textAlign: \"center\", marginTop: \"10px\" }}\r\n                    >\r\n                        <span style={{ color: \"#6FC6DF\" }}>\r\n                            Did you forget your password?\r\n                        </span>\r\n                    </Link>\r\n                </StyledForm>\r\n\r\n                <p style={{ color: \"white\" }}>\r\n                    No account yet?{\" \"}\r\n                    <Link\r\n                        href=\"/register\"\r\n                        onClick={(e) => {\r\n                            e.preventDefault();\r\n                            history.push(\"/register\");\r\n                        }}\r\n                    >\r\n                        <span style={{ color: \"#6FC6DF\" }}>Create one now</span>\r\n                    </Link>\r\n                </p>\r\n            </FormContainer>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(LoginScreen);\r\n","import LoginScreen from './LoginScreen';\r\n\r\nexport default LoginScreen;","import styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-grow: 1;\r\n    max-height: 100%;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    align-content: center;\r\n    justify-items: center;\r\n    justify-content: center;\r\n    background: white;\r\n`;\r\n\r\nexport { Container };\r\n","import AllGrowsScreen from './AllGrowsScreen';\r\n\r\nexport default AllGrowsScreen;","import React, { useEffect } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { loadModules } from \"esri-loader\";\r\nimport Navbar from \"../Navbar\";\r\n\r\nimport { Container } from \"./styles\";\r\n\r\nconst AllGrowsScreen = (props) => {\r\n    useEffect(() => {\r\n        document.getElementById(`grow-scene-all`).style.height =\r\n            document.getElementById(`grow-scene-all`).clientWidth + \"px\";\r\n        loadModules([\r\n            \"esri/views/SceneView\",\r\n            \"esri/WebScene\",\r\n            \"esri/geometry/Polygon\",\r\n            \"esri/Graphic\",\r\n            \"esri/tasks/QueryTask\",\r\n        ])\r\n            .then(([SceneView, WebScene, Polygon, Graphic, QueryTask]) => {\r\n                const scene = new WebScene({\r\n                    portalItem: {\r\n                        id: window.config.baseSceneId,\r\n                    },\r\n                });\r\n                const view = new SceneView({\r\n                    map: scene,\r\n                    container: `grow-scene-all`,\r\n                });\r\n\r\n                view.when(() => {\r\n                    const growsTask = new QueryTask({\r\n                        url: window.config.growsLayer.url,\r\n                    });\r\n\r\n                    growsTask\r\n                        .execute({\r\n                            where: `end_time > DATE '${new Date().getFullYear()}-${(\r\n                                \"\" +\r\n                                (new Date().getMonth() + 1)\r\n                            ).padStart(2, \"0\")}-${\r\n                                \"\" + (new Date().getDate() + 1)\r\n                            }'`,\r\n                            outFields: \"*\",\r\n                            returnGeometry: true,\r\n                        })\r\n                        .then((result) => {\r\n                            const graphics = [];\r\n                            result.features.forEach((feature) => {\r\n                                feature.geometry = feature.geometry.centroid;\r\n                                feature.geometry.z = feature.attributes.height;\r\n                                graphics.push(\r\n                                    new Graphic({\r\n                                        geometry: feature.geometry,\r\n                                        symbol: {\r\n                                            type: \"picture-marker\",\r\n                                            url: `/img/${result.fields\r\n                                                .filter(\r\n                                                    (field) =>\r\n                                                        field.name ===\r\n                                                        \"plant_type\"\r\n                                                )[0]\r\n                                                .domain.codedValues.filter(\r\n                                                    (codedValue) =>\r\n                                                        codedValue.code ===\r\n                                                        feature.attributes\r\n                                                            .plant_type\r\n                                                )[0]\r\n                                                .name.toLowerCase()\r\n                                                .replace(/ /g, \"\")}.svg`,\r\n                                            width: \"16px\",\r\n                                            height: \"16px\",\r\n                                        },\r\n                                        attributes: {\r\n                                            id: feature.attributes.OBJECTID,\r\n                                            USABLE: true,\r\n                                        },\r\n                                    })\r\n                                );\r\n                            });\r\n\r\n                            view.graphics.addMany(graphics);\r\n\r\n                            view.goTo(graphics);\r\n                        });\r\n\r\n                    view.on(\"click\", (event) => {\r\n                        view.hitTest(event).then(function (response) {\r\n                            let plantResults = response.results.filter(\r\n                                (a) => a.graphic.attributes.USABLE\r\n                            );\r\n\r\n                            if (plantResults.length > 0) {\r\n                                props.history.push(\r\n                                    `/grow/${plantResults[0].graphic.attributes.id}`\r\n                                );\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <Container>\r\n            <Navbar history={props.history} />\r\n            <div\r\n                id=\"grow-scene-all\"\r\n                style={{ flexGrow: 1, width: \"100%\" }}\r\n            ></div>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(AllGrowsScreen);\r\n","import styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-grow: 1;\r\n    flex-direction: column;\r\n    background: #2d2d2d;\r\n`;\r\n\r\nconst PageContainer = styled.div`\r\n    width: calc(100% - 40px);\r\n    display: flex;\r\n    flex-grow: 1;\r\n    flex-direction: row;\r\n    padding: 0px 20px;\r\n`;\r\n\r\nconst InfoColumn = styled.div`\r\n    width: 33%;\r\n    display: flex;\r\n    height: 100%;\r\n    flex-direction: column;\r\n    padding-right: 20px;\r\n`;\r\n\r\nconst GrowsColumn = styled.div`\r\n    height: 100%;\r\n    flex-grow: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nexport { Container, PageContainer, InfoColumn, GrowsColumn };\r\n","import styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    background: #3f3f3f;\r\n    border-radius: 10px;\r\n    border: 1px solid white;\r\n    padding: 25px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: calc(100% - 50px);\r\n    margin-bottom: 20px;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst InfoContainer = styled.div`\r\n    flex-grow: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-left: 15px;\r\n`;\r\n\r\nconst Title = styled.p`\r\n    color: white;\r\n    font-size: 14px;\r\n    font-weight: bold;\r\n    margin: 0;\r\n`;\r\n\r\nconst InfoPiece = styled.div`\r\n    color: #B5B5B5;\r\n    font-size: 12px;\r\n    margin: 0;\r\n`;\r\n\r\nexport { Container, InfoContainer, Title, InfoPiece };","import GrowBadge from './GrowBadge';\r\n\r\nexport default GrowBadge;","import React, { useState, useEffect } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\nimport { Container, InfoContainer, Title, InfoPiece } from \"./styles\";\r\n\r\nconst GrowBadge = (props) => {\r\n    return props.fields && (props.fields.length > 0) ? (\r\n        <Link\r\n            href={`/grow/${props.data.OBJECTID}`}\r\n            onClick={(e) => {\r\n                e.preventDefault();\r\n                props.history.push(`/grow/${props.data.OBJECTID}`);\r\n            }}\r\n        >\r\n            <Container>\r\n                <img\r\n                    src={`https://hydroponics-app-f7956.web.app/img/${\r\n                        props.fields\r\n                            .filter((field) => field.name === \"plant_type\")[0]\r\n                            .domain.codedValues.filter(\r\n                                (codedValue) =>\r\n                                    codedValue.code === props.data.plant_type\r\n                            )[0].name.toLowerCase().replace(/ /g,\"\")\r\n                    }.svg`}\r\n                    alt={\r\n                        props.fields\r\n                            .filter((field) => field.name === \"plant_type\")[0]\r\n                            .domain.codedValues.filter(\r\n                                (codedValue) =>\r\n                                    codedValue.code === props.data.plant_type\r\n                            )[0].name\r\n                    }\r\n                    width=\"50\"\r\n                />\r\n                <InfoContainer>\r\n                    <Title>\r\n                        {\r\n                            props.fields\r\n                                .filter(\r\n                                    (field) => field.name === \"plant_type\"\r\n                                )[0]\r\n                                .domain.codedValues.filter(\r\n                                    (codedValue) =>\r\n                                        codedValue.code ===\r\n                                        props.data.plant_type\r\n                                )[0].name\r\n                        }\r\n                    </Title>\r\n                    <InfoPiece>\r\n                        Area:{\" \"}\r\n                        {props.data.Shape__Area.toLocaleString(undefined, {\r\n                            maximumFractionDigits: 2,\r\n                        })}{\" \"}\r\n                        sqm\r\n                    </InfoPiece>\r\n                    <InfoPiece>\r\n                        Plantation Type:{\" \"}\r\n                        {\r\n                            props.fields\r\n                                .filter(\r\n                                    (field) => field.name === \"plantation_type\"\r\n                                )[0]\r\n                                .domain.codedValues.filter(\r\n                                    (codedValue) =>\r\n                                        codedValue.code ===\r\n                                        props.data.plantation_type\r\n                                )[0].name\r\n                        }\r\n                    </InfoPiece>\r\n                    <InfoPiece>\r\n                        Growth Period:{\" \"}\r\n                        {new Date(props.data.start_time).toLocaleDateString()} -{\" \"}\r\n                        {new Date(props.data.end_time).toLocaleDateString()}\r\n                    </InfoPiece>\r\n                    <InfoPiece>\r\n                        Expected Yield: {props.data.expected_yield}\r\n                    </InfoPiece>\r\n                </InfoContainer>\r\n            </Container>\r\n        </Link>\r\n    ) : null;\r\n};\r\n\r\nexport default withRouter(GrowBadge);\r\n","import MyGrowsScene from \"./MyGrowsScene\";\r\n\r\nexport default MyGrowsScene;\r\n","import React, { useEffect } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { loadModules } from \"esri-loader\";\r\n\r\nimport {} from \"./styles\";\r\n\r\nconst MyGrowsScene = (props) => {\r\n    const creatorId = props.creatorId;\r\n\r\n    useEffect(() => {\r\n        document.getElementById(`grow-scene-${creatorId}`).style.height =\r\n            document.getElementById(`grow-scene-${creatorId}`).clientWidth +\r\n            \"px\";\r\n        loadModules([\r\n            \"esri/views/SceneView\",\r\n            \"esri/WebScene\",\r\n            \"esri/geometry/Polygon\",\r\n            \"esri/Graphic\",\r\n            \"esri/tasks/QueryTask\",\r\n        ])\r\n            .then(([SceneView, WebScene, Polygon, Graphic, QueryTask]) => {\r\n                const scene = new WebScene({\r\n                    portalItem: {\r\n                        id: window.config.baseSceneId,\r\n                    },\r\n                });\r\n                const view = new SceneView({\r\n                    map: scene,\r\n                    container: `grow-scene-${creatorId}`,\r\n                });\r\n\r\n                view.when(() => {\r\n                    const growsTask = new QueryTask({\r\n                        url: window.config.growsLayer.url,\r\n                    });\r\n\r\n                    growsTask\r\n                        .execute({\r\n                            where: `creator_id = '${creatorId}' and end_time > DATE '${new Date().getFullYear()}-${(\r\n                                \"\" +\r\n                                (new Date().getMonth() + 1)\r\n                            ).padStart(2, \"0\")}-${\r\n                                \"\" + (new Date().getDate() + 1)\r\n                            }'`,\r\n                            outFields: \"*\",\r\n                            returnGeometry: true,\r\n                        })\r\n                        .then((result) => {\r\n                            const graphics = [];\r\n                            result.features.forEach((feature) => {\r\n                                feature.geometry = feature.geometry.centroid;\r\n                                feature.geometry.z = feature.attributes.height;\r\n                                graphics.push(\r\n                                    new Graphic({\r\n                                        geometry: feature.geometry,\r\n                                        symbol: {\r\n                                            type: \"picture-marker\",\r\n                                            url: `https://hydroponics-app-f7956.web.app/img/${result.fields\r\n                                                .filter(\r\n                                                    (field) =>\r\n                                                        field.name ===\r\n                                                        \"plant_type\"\r\n                                                )[0]\r\n                                                .domain.codedValues.filter(\r\n                                                    (codedValue) =>\r\n                                                        codedValue.code ===\r\n                                                        feature.attributes\r\n                                                            .plant_type\r\n                                                )[0]\r\n                                                .name.toLowerCase().replace(/ /g,\"\")}.svg`,\r\n                                            width: \"16px\",\r\n                                            height: \"16px\",\r\n                                        },\r\n                                    })\r\n                                );\r\n                            });\r\n\r\n                            view.graphics.addMany(graphics);\r\n\r\n                            view.goTo(graphics);\r\n                        });\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <div id={`grow-scene-${creatorId}`} style={{ marginTop: \"10px\" }}></div>\r\n    );\r\n};\r\n\r\nexport default withRouter(MyGrowsScene);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport app from \"../firebase\";\r\nimport { withRouter, useParams } from \"react-router\";\r\nimport { loadModules } from \"esri-loader\";\r\nimport Navbar from \"../Navbar\";\r\n\r\nimport { Container, PageContainer, InfoColumn, GrowsColumn } from \"./styles\";\r\nimport GrowBadge from \"../GrowBadge\";\r\nimport MyGrowsScene from \"../MyGrowsScene\";\r\n\r\nimport Link from \"@material-ui/core/Link\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\n\r\nconst ProfileScreen = ({ history }) => {\r\n    const { profileId } = useParams();\r\n    const [profileData, setProfileData] = useState(null);\r\n    const [growsData, setGrowsData] = useState([]);\r\n    const [fieldsData, setFieldsData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const getProfileData = async () => {\r\n            const db = app.firestore();\r\n            let dbUserData = await db.collection(\"users\").doc(profileId).get();\r\n            if (dbUserData.exists) {\r\n                dbUserData = dbUserData.data();\r\n                setProfileData(dbUserData);\r\n            }\r\n        };\r\n        const getGrowData = async () => {\r\n            loadModules([\"esri/tasks/QueryTask\"]).then(([QueryTask]) => {\r\n                let queryTask = new QueryTask({\r\n                    url: window.config.growsLayer.url,\r\n                });\r\n                queryTask\r\n                    .execute({\r\n                        where: `${window.config.growsLayer.creatorField} = '${profileId}'`,\r\n                        orderByFields: \"start_time desc\",\r\n                        outFields: \"*\",\r\n                    })\r\n                    .then((result) => {\r\n                        setGrowsData(result.features);\r\n                        setFieldsData(result.fields);\r\n                    });\r\n            });\r\n        };\r\n        if (profileId) {\r\n            getProfileData();\r\n            getGrowData();\r\n        }\r\n    }, [profileId]);\r\n\r\n    if (profileData) {\r\n        const growBadges = growsData.map((grow) => (\r\n            <GrowBadge\r\n                key={\"grow_\" + grow.attributes.OBJECTID}\r\n                history={history}\r\n                data={grow.attributes}\r\n                fields={fieldsData}\r\n            />\r\n        ));\r\n        return (\r\n            <Container>\r\n                <Navbar history={history} />\r\n                <PageContainer>\r\n                    <InfoColumn>\r\n                        <h1\r\n                            style={{ color: \"#6FC6DF\" }}\r\n                        >{`${profileData.fname} ${profileData.lname}`}</h1>\r\n\r\n                        <Link\r\n                            href={`mailto:${profileData.email}`}\r\n                            style={{ color: \"white\", display: \"flex\" }}\r\n                        >\r\n                            {\" \"}\r\n                            <EmailIcon style={{ marginRight: \"3px\" }} />\r\n                            eMail Me\r\n                        </Link>\r\n\r\n                        <MyGrowsScene creatorId={profileId} />\r\n                    </InfoColumn>\r\n                    <GrowsColumn>\r\n                        <h3\r\n                            style={{ textAlign: \"center\", color: \"#9FC73B\" }}\r\n                        >{`${profileData.fname}'s Grows`}</h3>\r\n                        {(() => {\r\n                            if (growBadges.length > 0) return growBadges;\r\n                            else\r\n                                return (\r\n                                    <p\r\n                                        style={{\r\n                                            color: \"white\",\r\n                                            textAlign: \"center\",\r\n                                        }}\r\n                                    >\r\n                                        No Grows Found.{\" \"}\r\n                                        <Link\r\n                                            href=\"new\"\r\n                                            onClick={(e) => {\r\n                                                e.preventDefault();\r\n                                                history.push(\"/new\");\r\n                                            }}\r\n                                            style={{ textDecoration: \"none\" }}\r\n                                        >\r\n                                            <span style={{ color: \"#6FC6DF\" }}>\r\n                                                Start one now\r\n                                            </span>\r\n                                        </Link>\r\n                                    </p>\r\n                                );\r\n                        })()}\r\n                    </GrowsColumn>\r\n                </PageContainer>\r\n            </Container>\r\n        );\r\n    } else {\r\n        return (\r\n            <Container>\r\n                <Navbar history={history} />\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nexport default withRouter(ProfileScreen);\r\n","import ProfileScreen from './ProfileScreen';\r\n\r\nexport default ProfileScreen;","import styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-grow: 1;\r\n    flex-direction: column;\r\n    background: #2D2D2D;\r\n`;\r\n\r\nconst FormContainer = styled.div`\r\n    flex-direction: column;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-grow: 1;\r\n    align-items: center;\r\n    align-content: center;\r\n    justify-items: center;\r\n    justify-content: center;\r\n`;\r\nconst StyledForm = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    background: #474747;\r\n    padding: 25px;\r\n    width: 40%;\r\n    margin-bottom: 10%;\r\n    @media (max-width: 768px) {\r\n        width: calc(100% - 70px);\r\n        padding: 20px;\r\n        margin-bottom: 40%;\r\n    }\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n    font-weight: bold;\r\n    color: #9FC73B;\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n    padding: 10px;\r\n    background: #6FC6DF;\r\n    color: white;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    border: none;\r\n`;\r\n\r\nexport { Container, StyledForm, StyledLabel, StyledButton, FormContainer };\r\n","import React, { useCallback, useContext } from \"react\";\r\nimport { withRouter, Redirect } from \"react-router\";\r\nimport Navbar from \"../Navbar\";\r\nimport app from \"../firebase\";\r\nimport { AuthContext } from \"../Auth\";\r\n\r\nimport {\r\n    Container,\r\n    StyledForm,\r\n    StyledLabel,\r\n    StyledButton,\r\n    FormContainer,\r\n} from \"./styles\";\r\n\r\nconst RegisterScreen = ({ history }) => {\r\n    const handleRegister = useCallback(\r\n        async (event) => {\r\n            event.preventDefault();\r\n            const {\r\n                fname,\r\n                lname,\r\n                email,\r\n                password,\r\n                confirmpassword,\r\n            } = event.target.elements;\r\n            if (confirmpassword.value !== password.value) {\r\n                alert(\"Confirm password must match password\");\r\n            } else {\r\n                try {\r\n                    let userCredential = await app\r\n                        .auth()\r\n                        .createUserWithEmailAndPassword(\r\n                            email.value,\r\n                            password.value\r\n                        );\r\n                    const db = app.firestore();\r\n                    db.collection(\"users\").doc(userCredential.user.uid).set({\r\n                        fname: fname.value,\r\n                        lname: lname.value,\r\n                    });\r\n                } catch (err) {\r\n                    alert(err);\r\n                }\r\n            }\r\n        },\r\n        [history]\r\n    );\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    if (currentUser) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Navbar history={history} />\r\n            <FormContainer>\r\n                <p style={{ color: \"white\" }}>Let's get to know you!</p>\r\n                <StyledForm onSubmit={handleRegister}>\r\n                    <StyledLabel>First Name: </StyledLabel>\r\n                    <input\r\n                        style={{ padding: \"10px\" }}\r\n                        name=\"fname\"\r\n                        type=\"text\"\r\n                        required\r\n                        placeholder=\"First Name\"\r\n                    />\r\n                    <br />\r\n                    <StyledLabel>Last Name: </StyledLabel>\r\n                    <input\r\n                        style={{ padding: \"10px\" }}\r\n                        name=\"lname\"\r\n                        type=\"text\"\r\n                        required\r\n                        placeholder=\"Last Name\"\r\n                    />\r\n                    <br />\r\n                    <StyledLabel>eMail Address: </StyledLabel>\r\n                    <input\r\n                        style={{ padding: \"10px\" }}\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        required\r\n                        placeholder=\"eMail\"\r\n                    />\r\n                    <br />\r\n                    <StyledLabel>Password:</StyledLabel>\r\n                    <input\r\n                        style={{ padding: \"10px\" }}\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        required\r\n                        placeholder=\"Password\"\r\n                        minLength=\"6\"\r\n                    />\r\n                    <br />\r\n                    <StyledLabel>Confirm Password:</StyledLabel>\r\n                    <input\r\n                        style={{ padding: \"10px\" }}\r\n                        name=\"confirmpassword\"\r\n                        type=\"password\"\r\n                        required\r\n                        placeholder=\"Confirm Password\"\r\n                        minLength=\"6\"\r\n                    />\r\n                    <br />\r\n                    <StyledButton type=\"submit\">Register</StyledButton>\r\n                </StyledForm>\r\n            </FormContainer>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(RegisterScreen);\r\n","import RegisterScreen from './RegisterScreen';\r\n\r\nexport default RegisterScreen;","import styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-grow: 1;\r\n    flex-direction: column;\r\n    background: #2D2D2D;\r\n`;\r\n\r\nconst FormContainer = styled.div`\r\n    flex-direction: column;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-grow: 1;\r\n    align-items: center;\r\n    align-content: center;\r\n    justify-items: center;\r\n    justify-content: center;\r\n`;\r\nconst StyledForm = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    background: #474747;\r\n    padding: 25px;\r\n    width: 40%;\r\n    margin-bottom: 10%;\r\n    @media (max-width: 768px) {\r\n        width: calc(100% - 70px);\r\n        padding: 20px;\r\n        margin-bottom: 40%;\r\n    }\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n    font-weight: bold;\r\n    color: #9FC73B;\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n    padding: 10px;\r\n    background: #6FC6DF;\r\n    color: white;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    border: none;\r\n`;\r\n\r\nexport { Container, StyledForm, StyledLabel, StyledButton, FormContainer };\r\n","import React, { useCallback, useContext } from \"react\";\r\nimport { withRouter, Redirect } from \"react-router\";\r\nimport Navbar from \"../Navbar\";\r\nimport app from \"../firebase\";\r\nimport { AuthContext } from \"../Auth\";\r\nimport logo from \"../img/logo.svg\";\r\n\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\nimport {\r\n    Container,\r\n    StyledForm,\r\n    StyledLabel,\r\n    StyledButton,\r\n    FormContainer,\r\n} from \"./styles\";\r\n\r\nconst ForgotPassScreen = ({ history }) => {\r\n    const handleForgotPass = useCallback(\r\n        async (event) => {\r\n            event.preventDefault();\r\n            const { email } = event.target.elements;\r\n            try {\r\n                await app\r\n                    .auth()\r\n                    .sendPasswordResetEmail(email.value);\r\n                history.push(\"/\");\r\n            } catch (err) {\r\n                alert(err);\r\n            }\r\n        },\r\n        [history]\r\n    );\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    if (currentUser) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Navbar history={history} />\r\n            <FormContainer>\r\n                <StyledForm onSubmit={handleForgotPass}>\r\n                    <StyledLabel>eMail Address: </StyledLabel>\r\n                    <input\r\n                        style={{ padding: \"10px\" }}\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        required\r\n                        placeholder=\"eMail\"\r\n                    />\r\n                    <br />\r\n                    <StyledButton type=\"submit\">Forgot Password</StyledButton>\r\n                </StyledForm>\r\n            </FormContainer>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(ForgotPassScreen);\r\n","import ForgotPassScreen from './ForgotPassScreen';\r\n\r\nexport default ForgotPassScreen;","import styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    background: #3f3f3f;\r\n    border-radius: 10px;\r\n    border: 1px solid white;\r\n    padding: 25px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: calc(100% - 50px);\r\n    margin-bottom: 20px;\r\n`;\r\n\r\nconst InfoContainer = styled.div`\r\n    flex-grow: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-left: 15px;\r\n`;\r\n\r\nconst Title = styled.p`\r\n    color: white;\r\n    font-size: 14px;\r\n    font-weight: bold;\r\n    margin: 0;\r\n`;\r\n\r\nconst InfoPiece = styled.div`\r\n    color: #B5B5B5;\r\n    font-size: 12px;\r\n    margin: 0;\r\n`;\r\n\r\nexport { Container, InfoContainer, Title, InfoPiece };","import React, { useState, useEffect } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport { Container, InfoContainer, Title, InfoPiece } from \"./styles\";\r\n\r\nconst UpdateBadge = (props) => {\r\n    const [attachmentUrl, setAttachmentUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const loadAttachment = async () => {\r\n            fetch(\r\n                `${window.config.updates.url}/${props.data.attributes.objectid}/attachments?f=json`\r\n            )\r\n                .then((response) => response.json())\r\n                .then((result) => {\r\n                    if (result.attachmentInfos.length > 0) {\r\n                        setAttachmentUrl(\r\n                            `${window.config.updates.url}/${props.data.attributes.objectid}/attachments/${result.attachmentInfos[0].id}`\r\n                        );\r\n                    }\r\n                });\r\n        };\r\n        if (props.data.attributes.objectid) {\r\n            loadAttachment();\r\n        }\r\n    }, [props.data.attributes.objectid]);\r\n\r\n    return (\r\n        <Container>\r\n            <InfoContainer>\r\n                <Title>{props.data.attributes.title}</Title>\r\n                <InfoPiece>\r\n                    {new Date(\r\n                        props.data.attributes.CreationDate\r\n                    ).toLocaleDateString()} at {new Date(\r\n                        props.data.attributes.CreationDate\r\n                    ).toLocaleTimeString()}\r\n                </InfoPiece>\r\n                {(() => {\r\n                    if (attachmentUrl) {\r\n                        return (\r\n                            <img\r\n                                src={attachmentUrl}\r\n                                style={{ width: \"100%\" }}\r\n                            />\r\n                        );\r\n                    }\r\n                })()}\r\n                {(() => {\r\n                    if (props.data.attributes.message) {\r\n                        return (\r\n                            <InfoPiece>\r\n                                {props.data.attributes.message}\r\n                            </InfoPiece>\r\n                        );\r\n                    } else return null;\r\n                })()}\r\n            </InfoContainer>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(UpdateBadge);\r\n","import UpdateBadge from './UpdateBadge';\r\n\r\nexport default UpdateBadge;","import styled from \"styled-components\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-grow: 1;\r\n    flex-direction: column;\r\n    background: #2d2d2d;\r\n`;\r\n\r\nconst PageContainer = styled.div`\r\n    width: calc(100% - 40px);\r\n    display: flex;\r\n    flex-grow: 1;\r\n    flex-direction: row;\r\n    padding: 0px 20px;\r\n`;\r\n\r\nconst InfoColumn = styled.div`\r\n    width: 33%;\r\n    display: flex;\r\n    height: 100%;\r\n    flex-direction: column;\r\n\r\n    & h1,\r\n    & h3 {\r\n        color: white;\r\n        margin: 5px;\r\n    }\r\n\r\n    & h1 {\r\n        margin-top: 10px;\r\n        display: flex;\r\n        flex-direction: row;\r\n        align-items: center;\r\n    }\r\n    margin-right: 20px;\r\n`;\r\n\r\nconst UpdatesColumn = styled.div`\r\n    height: 100%;\r\n    flex-grow: 1;\r\n    width: 67%;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst TitleContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n    background-color: #6fc6df !important;\r\n    height: 40px;\r\n    & .MuiButton-label {\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nconst ModalStyled = styled(Modal)`\r\n    display: flex;\r\n    justify-content: center;\r\n    height: 80%;\r\n    padding-top: 5%;\r\n`;\r\n\r\nconst StylediFrame = styled.iframe`\r\n    width: 60%;\r\n    height: 100%;\r\n    border: none;\r\n    background: #3F3F3F;\r\n`;\r\n\r\nexport {\r\n    Container,\r\n    PageContainer,\r\n    InfoColumn,\r\n    UpdatesColumn,\r\n    TitleContainer,\r\n    StyledButton,\r\n    ModalStyled,\r\n    StylediFrame,\r\n};\r\n","import OneGrowScene from './OneGrowScene';\r\n\r\nexport default OneGrowScene;","import React, { useEffect } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { loadModules } from \"esri-loader\";\r\n\r\nimport {} from \"./styles\";\r\n\r\nconst OneGrowScene = (props) => {\r\n    useEffect(() => {\r\n        document.getElementById(`grow-scene-${props.id}`).style.height =\r\n            document.getElementById(`grow-scene-${props.id}`).clientWidth +\r\n            \"px\";\r\n        loadModules([\r\n            \"esri/views/SceneView\",\r\n            \"esri/WebScene\",\r\n            \"esri/geometry/Polygon\",\r\n            \"esri/Graphic\",\r\n        ])\r\n            .then(([SceneView, WebScene, Polygon, Graphic]) => {\r\n                const scene = new WebScene({\r\n                    portalItem: {\r\n                        id: window.config.baseSceneId,\r\n                    },\r\n                });\r\n                const view = new SceneView({\r\n                    map: scene,\r\n                    container: `grow-scene-${props.id}`,\r\n                });\r\n\r\n                view.when(() => {\r\n                    const growPoint = props.data.geometry.centroid;\r\n                    growPoint.z = props.data.attributes.height || 50;\r\n                    view.graphics.add(\r\n                        new Graphic({\r\n                            geometry: growPoint,\r\n                            symbol: {\r\n                                type: \"picture-marker\",\r\n                                url: `https://hydroponics-app-f7956.web.app/img/${\r\n                                    props.fields\r\n                                        .filter(\r\n                                            (field) =>\r\n                                                field.name === \"plant_type\"\r\n                                        )[0]\r\n                                        .domain.codedValues.filter(\r\n                                            (codedValue) =>\r\n                                                codedValue.code ===\r\n                                                props.data.attributes.plant_type\r\n                                        )[0].name.toLowerCase().replace(/ /g,\"\")\r\n                                }.svg`,\r\n                            },\r\n                        })\r\n                    );\r\n                    view.goTo({ target: growPoint, zoom: 20 });\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            });\r\n    }, []);\r\n\r\n    return <div id={`grow-scene-${props.id}`}></div>;\r\n};\r\n\r\nexport default withRouter(OneGrowScene);\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport app from \"../firebase\";\r\nimport { AuthContext } from \"../Auth\";\r\nimport { withRouter, useParams } from \"react-router\";\r\nimport Navbar from \"../Navbar\";\r\nimport { loadModules } from \"esri-loader\";\r\n\r\nimport Link from \"@material-ui/core/Link\";\r\nimport UpdateBadge from \"../UpdateBadge\";\r\n\r\nimport {\r\n    Container,\r\n    PageContainer,\r\n    InfoColumn,\r\n    UpdatesColumn,\r\n    TitleContainer,\r\n    StyledButton,\r\n    StylediFrame,\r\n    ModalStyled,\r\n} from \"./styles\";\r\nimport OneGrowScene from \"../OneGrowScene\";\r\n\r\nconst GrowScreen = ({ history }) => {\r\n    const { growId } = useParams();\r\n    const [growData, setGrowData] = useState(null);\r\n    const [updateData, setUpdateData] = useState([]);\r\n    const [dataCollectionIsOpen, setDataCollectionIsOpen] = useState(false);\r\n    const [fields, setFieldsData] = useState([]);\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    const handleDataCollectionClose = () => {\r\n        setDataCollectionIsOpen(false);\r\n        getGrowUpdates();\r\n    };\r\n\r\n    const openDataCollection = () => {\r\n        setDataCollectionIsOpen(true);\r\n    };\r\n\r\n    const getGrowUpdates = async () => {\r\n        loadModules([\"esri/tasks/QueryTask\"]).then(([QueryTask]) => {\r\n            let queryTask = new QueryTask({\r\n                url: window.config.updates.url,\r\n            });\r\n            queryTask\r\n                .execute({\r\n                    where: `grow_id = ${growId}`,\r\n                    outFields: \"*\",\r\n                    returnGeometry: false,\r\n                })\r\n                .then((result) => {\r\n                    setUpdateData(\r\n                        result.features.sort(\r\n                            (a, b) =>\r\n                                b.attributes.CreationDate -\r\n                                a.attributes.CreationDate\r\n                        )\r\n                    );\r\n                });\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const getGrowData = async () => {\r\n            loadModules([\"esri/tasks/QueryTask\"]).then(([QueryTask]) => {\r\n                let queryTask = new QueryTask({\r\n                    url: window.config.growsLayer.url,\r\n                });\r\n                queryTask\r\n                    .execute({\r\n                        where: `OBJECTID = '${growId}'`,\r\n                        outFields: \"*\",\r\n                        returnGeometry: true,\r\n                    })\r\n                    .then(async (result) => {\r\n                        const data = result.features[0];\r\n                        const db = app.firestore();\r\n                        let dbUserData = await db\r\n                            .collection(\"users\")\r\n                            .doc(data.attributes.creator_id)\r\n                            .get();\r\n                        if (dbUserData.exists) {\r\n                            dbUserData = dbUserData.data();\r\n                            data.attributes.creator = dbUserData;\r\n                        }\r\n                        setFieldsData(result.fields);\r\n                        setGrowData(data);\r\n                    });\r\n            });\r\n        };\r\n        if (growId) {\r\n            getGrowData();\r\n            getGrowUpdates();\r\n        }\r\n    }, [growId]);\r\n\r\n    if (growData && fields.length > 0 && growData.attributes.creator) {\r\n        const growUpdateBadges = updateData.map((update) => (\r\n            <UpdateBadge\r\n                key={`grow_${growId}_update_${update.attributes.objectid}`}\r\n                history={history}\r\n                data={update}\r\n            />\r\n        ));\r\n        return (\r\n            <Container>\r\n                <Navbar history={history} />\r\n                <PageContainer>\r\n                    <InfoColumn>\r\n                        <h1 style={{ color: \"#9FC73B\" }}>\r\n                            <img\r\n                                src={`https://hydroponics-app-f7956.web.app/img/${fields\r\n                                    .filter(\r\n                                        (field) => field.name === \"plant_type\"\r\n                                    )[0]\r\n                                    .domain.codedValues.filter(\r\n                                        (codedValue) =>\r\n                                            codedValue.code ===\r\n                                            growData.attributes.plant_type\r\n                                    )[0]\r\n                                    .name.toLowerCase().replace(/ /g,\"\")}.svg`}\r\n                                alt={\r\n                                    fields\r\n                                        .filter(\r\n                                            (field) =>\r\n                                                field.name === \"plant_type\"\r\n                                        )[0]\r\n                                        .domain.codedValues.filter(\r\n                                            (codedValue) =>\r\n                                                codedValue.code ===\r\n                                                growData.attributes.plant_type\r\n                                        )[0].name\r\n                                }\r\n                                width=\"30px\"\r\n                                style={{ marginRight: \"5px\" }}\r\n                            />\r\n                            {\r\n                                fields\r\n                                    .filter(\r\n                                        (field) => field.name === \"plant_type\"\r\n                                    )[0]\r\n                                    .domain.codedValues.filter(\r\n                                        (codedValue) =>\r\n                                            codedValue.code ===\r\n                                            growData.attributes.plant_type\r\n                                    )[0].name\r\n                            }\r\n                        </h1>\r\n                        <Link\r\n                            href={`/profile/${growData.attributes.creator_id}`}\r\n                            onClick={(e) => {\r\n                                e.preventDefault();\r\n                                history.push(\r\n                                    `/profile/${growData.attributes.creator_id}`\r\n                                );\r\n                            }}\r\n                        >\r\n                            <h3>{`${growData.attributes.creator.fname} ${growData.attributes.creator.lname}`}</h3>\r\n                        </Link>\r\n                        <h3>\r\n                            {growData.attributes.Shape__Area.toLocaleString(\r\n                                undefined,\r\n                                {\r\n                                    maximumFractionDigits: 2,\r\n                                }\r\n                            )}{\" \"}\r\n                            sqm\r\n                        </h3>\r\n                        <h3>\r\n                            {\r\n                                fields\r\n                                    .filter(\r\n                                        (field) =>\r\n                                            field.name === \"plantation_type\"\r\n                                    )[0]\r\n                                    .domain.codedValues.filter(\r\n                                        (codedValue) =>\r\n                                            codedValue.code ===\r\n                                            growData.attributes.plantation_type\r\n                                    )[0].name\r\n                            }\r\n                        </h3>\r\n                        <h3>\r\n                            {new Date(\r\n                                growData.attributes.start_time\r\n                            ).toLocaleDateString()}{\" \"}\r\n                            -{\" \"}\r\n                            {new Date(\r\n                                growData.attributes.end_time\r\n                            ).toLocaleDateString()}\r\n                        </h3>\r\n                        <h3>{growData.attributes.expected_yield}</h3>\r\n                        <OneGrowScene\r\n                            id={`grow_${growId}`}\r\n                            data={growData}\r\n                            fields={fields}\r\n                        />\r\n                    </InfoColumn>\r\n                    <UpdatesColumn>\r\n                        <TitleContainer>\r\n                            <h3\r\n                                style={{\r\n                                    textAlign: \"center\",\r\n                                    color: \"#6FC6DF\",\r\n                                }}\r\n                            >\r\n                                Updates\r\n                            </h3>\r\n                            {(() => {\r\n                                if (\r\n                                    currentUser &&\r\n                                    currentUser.uid ===\r\n                                        growData.attributes.creator_id\r\n                                ) {\r\n                                    return (\r\n                                        <StyledButton\r\n                                            onClick={() => {\r\n                                                openDataCollection();\r\n                                            }}\r\n                                        >\r\n                                            Add Update\r\n                                        </StyledButton>\r\n                                    );\r\n                                }\r\n                            })()}\r\n                        </TitleContainer>\r\n                        {(() => {\r\n                            if (growUpdateBadges.length > 0)\r\n                                return growUpdateBadges;\r\n                            else\r\n                                return (\r\n                                    <p\r\n                                        style={{\r\n                                            color: \"white\",\r\n                                            textAlign: \"center\",\r\n                                        }}\r\n                                    >\r\n                                        No Updates Yet\r\n                                    </p>\r\n                                );\r\n                        })()}\r\n                    </UpdatesColumn>\r\n                </PageContainer>\r\n                <ModalStyled\r\n                    open={dataCollectionIsOpen}\r\n                    onClose={handleDataCollectionClose}\r\n                >\r\n                    <StylediFrame\r\n                        src={window.config.updates.survey.replace(\r\n                            \"{growid}\",\r\n                            growId\r\n                        )}\r\n                    ></StylediFrame>\r\n                </ModalStyled>\r\n            </Container>\r\n        );\r\n    } else {\r\n        return (\r\n            <Container>\r\n                <Navbar history={history} />\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nexport default withRouter(GrowScreen);\r\n","import GrowScreen from './GrowScreen';\r\n\r\nexport default GrowScreen;","import styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nexport { Container };\r\n","import styled from \"styled-components\";\r\n\r\nconst MapContainer = styled.div`\r\n    width: 100%;\r\n    flex-grow: 1;\r\n`;\r\n\r\nexport { MapContainer };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { loadModules } from \"esri-loader\";\r\n\r\nimport { MapContainer } from \"./styles\";\r\n\r\nconst NewGrowMap = React.memo(\r\n    (props) => {\r\n        const [view, setView] = useState(null);\r\n\r\n        if (view && props.selectState === 0) {\r\n            loadModules([\"esri/views/draw/Draw\", \"esri/Graphic\"]).then(\r\n                ([Draw, Graphic]) => {\r\n                    const draw = new Draw({ view });\r\n                    view.focus();\r\n                    view.graphics.removeAll();\r\n                    let action = draw.create(\"polygon\", { mode: \"click\" });\r\n\r\n                    const createPolygonGraphic = (vertices) => {\r\n                        view.graphics.removeAll();\r\n                        let polygon = {\r\n                            type: \"polygon\",\r\n                            rings: vertices,\r\n                            spatialReference: view.spatialReference,\r\n                        };\r\n\r\n                        let graphic = new Graphic({\r\n                            geometry: polygon,\r\n                            symbol: {\r\n                                type: \"simple-fill\",\r\n                                color: [5, 30, 45, 0.8],\r\n                                style: \"solid\",\r\n                                outline: {\r\n                                    color: \"white\",\r\n                                    width: 1,\r\n                                },\r\n                            },\r\n                        });\r\n                        view.graphics.add(graphic);\r\n                    };\r\n\r\n                    action.on(\r\n                        [\"vertex-add\", \"vertex-remove\", \"cursor-update\"],\r\n                        (evt) => {\r\n                            createPolygonGraphic(evt.vertices);\r\n                        }\r\n                    );\r\n\r\n                    action.on(\"draw-complete\", (evt) => {\r\n                        props.onSelectionComplete({\r\n                            type: \"polygon\",\r\n                            rings: evt.vertices,\r\n                            spatialReference: view.spatialReference,\r\n                        });\r\n                    });\r\n                }\r\n            );\r\n        }\r\n\r\n        useEffect(() => {\r\n            loadModules([\r\n                \"esri/views/MapView\",\r\n                \"esri/WebMap\",\r\n                \"esri/widgets/Locate\",\r\n                \"esri/widgets/Expand\",\r\n                \"esri/widgets/Search\",\r\n                \"esri/tasks/QueryTask\",\r\n                \"esri/Graphic\",\r\n            ])\r\n                .then(\r\n                    ([\r\n                        MapView,\r\n                        WebMap,\r\n                        Locate,\r\n                        Expand,\r\n                        Search,\r\n                        QueryTask,\r\n                        Graphic,\r\n                    ]) => {\r\n                        const map = new WebMap({\r\n                            portalItem: {\r\n                                id: window.config.newGrowMapId,\r\n                            },\r\n                        });\r\n                        const view = new MapView({\r\n                            map: map,\r\n                            container: `new-grow-map`,\r\n                        });\r\n                        setView(view);\r\n\r\n                        view.when(() => {\r\n                            const locate = new Locate({\r\n                                view: view,\r\n                                useHeadingEnabled: false,\r\n                                goToOverride: function (view, options) {\r\n                                    options.target.scale = 1500;\r\n                                    return view.goTo(options.target);\r\n                                },\r\n                            });\r\n                            view.ui.add(locate, \"top-left\");\r\n\r\n                            const searchWidget = new Search({\r\n                                view: view,\r\n                            });\r\n\r\n                            let searchExpand = new Expand({\r\n                                view: view,\r\n                                content: searchWidget,\r\n                            });\r\n\r\n                            view.ui.add(searchExpand, {\r\n                                position: \"top-left\",\r\n                                index: 2,\r\n                            });\r\n\r\n                            const growsTask = new QueryTask({\r\n                                url: window.config.growsLayer.url,\r\n                            });\r\n\r\n                            growsTask\r\n                                .execute({\r\n                                    where: `end_time > DATE '${new Date().getFullYear()}-${(\r\n                                        \"\" +\r\n                                        (new Date().getMonth() + 1)\r\n                                    ).padStart(2, \"0\")}-${\r\n                                        \"\" + (new Date().getDate() + 1)\r\n                                    }'`,\r\n                                    outFields: \"*\",\r\n                                    returnGeometry: true,\r\n                                })\r\n                                .then((result) => {\r\n                                    const graphics = [];\r\n                                    result.features.forEach((feature) => {\r\n                                        feature.geometry =\r\n                                            feature.geometry.centroid;\r\n                                        feature.geometry.z =\r\n                                            feature.attributes.height;\r\n                                        graphics.push(\r\n                                            new Graphic({\r\n                                                geometry: feature.geometry,\r\n                                                symbol: {\r\n                                                    type: \"picture-marker\",\r\n                                                    url: `https://hydroponics-app-f7956.web.app/img/${result.fields\r\n                                                        .filter(\r\n                                                            (field) =>\r\n                                                                field.name ===\r\n                                                                \"plant_type\"\r\n                                                        )[0]\r\n                                                        .domain.codedValues.filter(\r\n                                                            (codedValue) =>\r\n                                                                codedValue.code ===\r\n                                                                feature\r\n                                                                    .attributes\r\n                                                                    .plant_type\r\n                                                        )[0]\r\n                                                        .name.toLowerCase().replace(/ /g,\"\")}.svg`,\r\n                                                    width: \"16px\",\r\n                                                    height: \"16px\",\r\n                                                },\r\n                                            })\r\n                                        );\r\n                                    });\r\n\r\n                                    view.graphics.addMany(graphics);\r\n\r\n                                    view.goTo(graphics);\r\n                                });\r\n                        });\r\n                    }\r\n                )\r\n                .catch((err) => {\r\n                    console.error(err);\r\n                });\r\n        }, []);\r\n\r\n        return <MapContainer id={`new-grow-map`}></MapContainer>;\r\n    },\r\n    () => false\r\n);\r\n\r\nexport default withRouter(NewGrowMap);\r\n","import NewGrowMap from './NewGrowMap';\r\n\r\nexport default NewGrowMap;","import styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    position: absolute;\r\n    top: 245px;\r\n    left: 15px;\r\n    background: white;\r\n    height: calc(100% - 300px);\r\n    width: 300px;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nexport { Container };\r\n","import GrowWizard from \"./GrowWizard\";\r\n\r\nexport default GrowWizard;\r\n","import React, { useState } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport { Container } from \"./styles\";\r\n\r\nconst GrowWizard = (props) => {\r\n    const [step, setStep] = useState(0);\r\n\r\n    const next = () => {\r\n        setStep(step + 1);\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            {React.Children.map(props.children, (child, i) => {\r\n                return i === step\r\n                    ? React.cloneElement(child, { onComplete: next })\r\n                    : null;\r\n            })}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(GrowWizard);\r\n","import styled from \"styled-components\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst Container = styled.div`\r\n    background: white;\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n    background: #2d2d2d;\r\n    color: white;\r\n    padding: 10px;\r\n`;\r\n\r\nconst Content = styled.div`\r\n    flex-grow: 1;\r\n    background: #3f3f3f;\r\n    padding: 10px;\r\n`;\r\n\r\nconst Footer = styled.div`\r\n    background: #2d2d2d;\r\n    padding: 10px;\r\n    flex-direction: row;\r\n`;\r\n\r\nconst SelectionButton = styled(Button)`\r\n    background-color: #6fc6df !important;\r\n    height: 40px;\r\n    & .MuiButton-label {\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nconst CompletionButton = styled(Button)`\r\n    background-color: #6fc6df !important;\r\n    height: 40px;\r\n    width: 100% !important;\r\n    & .MuiButton-label {\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nexport {\r\n    Container,\r\n    Header,\r\n    Content,\r\n    Footer,\r\n    SelectionButton,\r\n    CompletionButton,\r\n};\r\n","import DrawPolygonWStep from \"./DrawPolygonWStep\";\r\n\r\nexport default DrawPolygonWStep;\r\n","import React, { useState } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport {\r\n    Container,\r\n    Header,\r\n    Content,\r\n    Footer,\r\n    SelectionButton,\r\n    CompletionButton,\r\n} from \"./styles\";\r\n\r\nconst DrawPolygonWStep = (props) => {\r\n    return (\r\n        <Container>\r\n            <Header>Area Selection</Header>\r\n            <Content style={{ textAlign: \"center\" }}>\r\n                <p style={{ color: \"white\" }}>\r\n                    Hi! Select an area to get started.\r\n                </p>\r\n                {(() => {\r\n                    if (props.selectState === 0) {\r\n                        return (\r\n                            <p style={{ color: \"white\" }}>\r\n                                Now Draw on the Map\r\n                            </p>\r\n                        );\r\n                    } else if (props.selectState === 1) {\r\n                        return (\r\n                            <span>\r\n                                <p style={{ color: \"white\" }}>\r\n                                    An Area is Selected\r\n                                </p>\r\n                                <SelectionButton\r\n                                    onClick={props.onSelectClicked}\r\n                                >\r\n                                    New Selection\r\n                                </SelectionButton>\r\n                            </span>\r\n                        );\r\n                    } else {\r\n                        return (\r\n                            <SelectionButton onClick={props.onSelectClicked}>\r\n                                Select\r\n                            </SelectionButton>\r\n                        );\r\n                    }\r\n                })()}\r\n            </Content>\r\n            {(() => {\r\n                if (props.selectState === 1) {\r\n                    return (\r\n                        <Footer style={{ justifyItems: \"right\" }}>\r\n                            <CompletionButton onClick={props.onComplete}>\r\n                                Next\r\n                            </CompletionButton>\r\n                        </Footer>\r\n                    );\r\n                }\r\n            })()}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(DrawPolygonWStep);\r\n","import styled from \"styled-components\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst Container = styled.div`\r\n    background: white;\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n    background: #2d2d2d;\r\n    color: white;\r\n    padding: 10px;\r\n`;\r\n\r\nconst Content = styled.div`\r\n    flex-grow: 1;\r\n    background: #3f3f3f;\r\n    padding: 10px;\r\n\r\n    & .MuiFormControlLabel-label {\r\n        color: white;\r\n    }\r\n\r\n    & .MuiRadio-root {\r\n        color: #6FC6DF;\r\n    }\r\n\r\n    & .MuiRadio-colorSecondary.Mui-checked {\r\n        color: #6FC6DF;\r\n    }\r\n`;\r\n\r\nconst Footer = styled.div`\r\n    background: #2d2d2d;\r\n    padding: 10px;\r\n    flex-direction: row;\r\n`;\r\n\r\nconst SelectionButton = styled(Button)`\r\n    background-color: #6fc6df !important;\r\n    height: 40px;\r\n    & .MuiButton-label {\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nconst CompletionButton = styled(Button)`\r\n    background-color: #6fc6df !important;\r\n    height: 40px;\r\n    width: 100% !important;\r\n    & .MuiButton-label {\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nexport {\r\n    Container,\r\n    Header,\r\n    Content,\r\n    Footer,\r\n    SelectionButton,\r\n    CompletionButton,\r\n};\r\n","import SelectPTypeWStep from \"./SelectPTypeWStep\";\r\n\r\nexport default SelectPTypeWStep;\r\n","import React, { useState } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport {\r\n    Container,\r\n    Header,\r\n    Content,\r\n    Footer,\r\n    SelectionButton,\r\n    CompletionButton,\r\n} from \"./styles\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\n\r\nconst SelectPTypeWStep = (props) => {\r\n    const [value, setValue] = React.useState(1);\r\n\r\n    return (\r\n        <Container>\r\n            <Header>Type Selection</Header>\r\n            <Content style={{ textAlign: \"center\" }}>\r\n                <p style={{ color: \"white\" }}>\r\n                    Please select the type of hydroponic planting you want to\r\n                    do.\r\n                </p>\r\n                <FormControl component=\"fieldset\">\r\n                    <RadioGroup\r\n                        value={value}\r\n                        name=\"radio-buttons-group\"\r\n                        onChange={(a, b) => {\r\n                            setValue(parseInt(b));\r\n                            props.onChange(parseInt(b));\r\n                        }}\r\n                    >\r\n                        <FormControlLabel\r\n                            value={1}\r\n                            control={<Radio />}\r\n                            label=\"Tower\"\r\n                        />\r\n                        <FormControlLabel\r\n                            value={2}\r\n                            control={<Radio />}\r\n                            label=\"Stack\"\r\n                        />\r\n                        <FormControlLabel\r\n                            value={3}\r\n                            control={<Radio />}\r\n                            label=\"Wick\"\r\n                        />\r\n                    </RadioGroup>\r\n                </FormControl>\r\n            </Content>\r\n            <Footer style={{ justifyItems: \"right\" }}>\r\n                <CompletionButton onClick={props.onComplete}>\r\n                    Next\r\n                </CompletionButton>\r\n            </Footer>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(SelectPTypeWStep);\r\n","import styled from \"styled-components\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst Container = styled.div`\r\n    background: white;\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n    background: #2d2d2d;\r\n    color: white;\r\n    padding: 10px;\r\n`;\r\n\r\nconst Content = styled.div`\r\n    flex-grow: 1;\r\n    background: #3f3f3f;\r\n    padding: 10px;\r\n    overflow: auto;\r\n\r\n    & .MuiCircularProgress-colorPrimary {\r\n        color: #98BD3B;\r\n    }\r\n`;\r\n\r\nconst Footer = styled.div`\r\n    background: #2d2d2d;\r\n    padding: 10px;\r\n    flex-direction: row;\r\n`;\r\n\r\nconst SelectionButton = styled(Button)`\r\n    background-color: #6fc6df !important;\r\n    height: 40px;\r\n    & .MuiButton-label {\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nconst CompletionButton = styled(Button)`\r\n    background-color: #6fc6df !important;\r\n    height: 40px;\r\n    width: 100% !important;\r\n    & .MuiButton-label {\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nexport {\r\n    Container,\r\n    Header,\r\n    Content,\r\n    Footer,\r\n    SelectionButton,\r\n    CompletionButton,\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n    background: #3f3f3f;\r\n    border-radius: 10px;\r\n    border: 1px solid white;\r\n    padding: 25px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: calc(100% - 50px);\r\n    margin-bottom: 20px;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst InfoContainer = styled.div`\r\n    flex-grow: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-left: 15px;\r\n`;\r\n\r\nconst Title = styled.p`\r\n    color: white;\r\n    font-size: 14px;\r\n    font-weight: bold;\r\n    margin: 0;\r\n`;\r\n\r\nconst InfoPiece = styled.div`\r\n    color: #B5B5B5;\r\n    font-size: 12px;\r\n    margin: 0;\r\n`;\r\n\r\nexport { Container, InfoContainer, Title, InfoPiece };","import React, { useState, useEffect } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\nimport { Container, InfoContainer, Title, InfoPiece } from \"./styles\";\r\n\r\nconst PlantOption = (props) => {\r\n    return (\r\n        <Link\r\n            onClick={(e) => {\r\n                e.preventDefault();\r\n                props.onSelect({\r\n                    plantType: props.data.plant_type,\r\n                    growPeriod: props.data.GROW_PERIOD,\r\n                    exYield: props.data.EX_YIELD,\r\n                });\r\n            }}\r\n        >\r\n            <Container>\r\n                <img\r\n                    src={`https://hydroponics-app-f7956.web.app/img/${props.data.CROP.toLowerCase().replace(\r\n                        / /g,\r\n                        \"\"\r\n                    )}.svg`}\r\n                    alt={props.data.CROP}\r\n                    width=\"50\"\r\n                />\r\n                <InfoContainer>\r\n                    <Title>{props.data.CROP}</Title>\r\n                    {(() => {\r\n                        if (props.data.recommended) {\r\n                            return (\r\n                                <InfoPiece style={{ color: \"#9FC73B\" }}>\r\n                                    Recommended\r\n                                </InfoPiece>\r\n                            );\r\n                        }\r\n                    })()}\r\n                    <InfoPiece>\r\n                        Growth Period: {props.data.GROW_PERIOD} Days\r\n                    </InfoPiece>\r\n                    <InfoPiece>Expected Yield: {props.data.EX_YIELD}</InfoPiece>\r\n                </InfoContainer>\r\n            </Container>\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport default withRouter(PlantOption);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { loadModules } from \"esri-loader\";\r\n\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport {\r\n    Container,\r\n    Header,\r\n    Content,\r\n    Footer,\r\n    SelectionButton,\r\n    CompletionButton,\r\n} from \"./styles\";\r\nimport PlantOption from \"../PlantOption/PlantOption\";\r\n\r\nconst PlantRecWStep = (props) => {\r\n    const [plants, setPlants] = useState(null);\r\n\r\n    useEffect(() => {\r\n        loadModules([\r\n            \"esri/config\",\r\n            \"esri/tasks/QueryTask\",\r\n            \"esri/geometry/Polygon\",\r\n            \"esri/request\",\r\n            \"esri/geometry/geometryEngine\",\r\n        ]).then(\r\n            async ([\r\n                esriConfig,\r\n                QueryTask,\r\n                Polygon,\r\n                esriRequest,\r\n                geometryEngine,\r\n            ]) => {\r\n                esriConfig.apiKey =\r\n                    \"AAPK899137865cec4381bb28e1be78781355JyLIcqwK0HIoBzhsp1KZbYnO5LdjRFn9OHvAoZZfFFhjPoGLg6wQWpmiTBQGZMPv\";\r\n\r\n                const growMidDate = new Date(\r\n                    new Date().getTime() + 10 * 24 * 60 * 60 * 1000\r\n                );\r\n\r\n                const AoI = new Polygon(props.AoI);\r\n                const AoICenter = new Polygon(props.AoI).centroid;\r\n\r\n                const tempTask = new QueryTask({\r\n                    url: window.config.tempLayer.url,\r\n                });\r\n                const tempResult = await tempTask.execute({\r\n                    geometry: props.AoI,\r\n                    outFields:\r\n                        window.config.tempLayer.fields[growMidDate.getMonth()],\r\n                    geometryType: \"esriGeometryPolygon\",\r\n                    inSR: props.AoI.spatialReference,\r\n                });\r\n                const tempVal =\r\n                    tempResult.features[0].attributes[\r\n                        window.config.tempLayer.fields[growMidDate.getMonth()]\r\n                    ];\r\n\r\n                const solarResult = await esriRequest(\r\n                    `${window.config.solarLayer.url}/identify`,\r\n                    {\r\n                        query: {\r\n                            f: \"json\",\r\n                            geometryType: \"esriGeometryPoint\",\r\n                            geometry: JSON.stringify({\r\n                                type: \"point\",\r\n                                x: AoICenter.x,\r\n                                y: AoICenter.y,\r\n                                spatialReference: props.AoI.spatialReference,\r\n                            }),\r\n                            renderingRules: `[{\"rasterFunction\":\"Direct normal irradiation\"}]`,\r\n                            returnPixelValues: true,\r\n                            returnUnformattedValues: true,\r\n                            returnCatalogItems: false,\r\n                        },\r\n                    }\r\n                );\r\n\r\n                let solarVal = parseInt(solarResult.data.processedValues[0]);\r\n                solarVal =\r\n                    solarVal > window.config.solarLayer.cutoffs.medium &&\r\n                    solarVal < window.config.solarLayer.cutoffs.high\r\n                        ? \"MEDIUM\"\r\n                        : solarVal > window.config.solarLayer.cutoffs.high\r\n                        ? \"HIGH\"\r\n                        : \"LOW\";\r\n\r\n                const plantTask = new QueryTask({\r\n                    url: window.config.plantLayer.url,\r\n                });\r\n\r\n                let plants = await plantTask.execute({\r\n                    where: \"1=1\",\r\n                    outFields: \"*\",\r\n                });\r\n\r\n                plants = plants.features;\r\n\r\n                let plantationInfo = {\r\n                    width: 1.35,\r\n                    height: 1.35,\r\n                    ports: 28,\r\n                };\r\n\r\n                if (props.PType === 2) {\r\n                    plantationInfo = {\r\n                        width: 1,\r\n                        height: 0.55,\r\n                        ports: 144,\r\n                    };\r\n                } else if (props.PType === 3) {\r\n                    plantationInfo = {\r\n                        width: 1,\r\n                        height: 0.55,\r\n                        ports: 18,\r\n                    };\r\n                }\r\n\r\n                plants.forEach((plant) => {\r\n                    plant.attributes.recommended =\r\n                        plant.attributes.DAY_TEMP_HIGH_FAR >= tempVal &&\r\n                        tempVal <= plant.attributes.DAY_TEMP_LOW_FAR &&\r\n                        plant.attributes.SUN_INTENSITY === solarVal;\r\n\r\n                    const plantationCount =\r\n                        geometryEngine.planarArea(AoI, \"square-meters\") /\r\n                        (plantationInfo.width * plantationInfo.height);\r\n                    const capacity = plantationInfo.ports * plantationCount;\r\n                    plant.attributes.EX_YIELD = Math.ceil(\r\n                        capacity * 1.3 - capacity * 1.3 * 0.02\r\n                    );\r\n                });\r\n\r\n                setPlants(plants);\r\n            }\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <Container>\r\n            <Header>Plant Selection</Header>\r\n            <Content style={{ textAlign: \"center\" }}>\r\n                {(() => {\r\n                    if (!plants) {\r\n                        return (\r\n                            <span>\r\n                                <p style={{ color: \"white\" }}>\r\n                                    Hang on! We're figuring out the best plants\r\n                                    for you.\r\n                                </p>\r\n                                <CircularProgress />\r\n                            </span>\r\n                        );\r\n                    } else {\r\n                        return plants\r\n                            .filter((a) => a.attributes.plant_type !== 0)\r\n                            .sort((a, b) => {\r\n                                if (\r\n                                    a.attributes.recommended &&\r\n                                    !b.attributes.recommended\r\n                                ) {\r\n                                    return -1;\r\n                                } else if (\r\n                                    b.attributes.recommended &&\r\n                                    !a.attributes.recommended\r\n                                ) {\r\n                                    return 1;\r\n                                } else {\r\n                                    if (\r\n                                        a.attributes.GROW_PERIOD <\r\n                                        b.attributes.GROW_PERIOD\r\n                                    ) {\r\n                                        return -1;\r\n                                    } else if (\r\n                                        b.attributes.GROW_PERIOD <\r\n                                        a.attributes.GROW_PERIOD\r\n                                    ) {\r\n                                        return 1;\r\n                                    } else {\r\n                                        if (\r\n                                            a.attributes.CROP <\r\n                                            b.attributes.CROP\r\n                                        ) {\r\n                                            return -1;\r\n                                        } else if (\r\n                                            b.attributes.CROP <\r\n                                            a.attributes.CROP\r\n                                        ) {\r\n                                            return 1;\r\n                                        } else {\r\n                                            return 0;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })\r\n                            .map((plant, i) => (\r\n                                <PlantOption\r\n                                    data={plant.attributes}\r\n                                    key={`plant_option_${i}_${plant.attributes.plant_type}`}\r\n                                    onSelect={(plantInfo) => {\r\n                                        props.onPlantSelection({\r\n                                            ...plantInfo                                            \r\n                                        });\r\n                                        props.onComplete();\r\n                                    }}\r\n                                />\r\n                            ));\r\n                    }\r\n                })()}\r\n            </Content>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(PlantRecWStep);\r\n","import PlantRecWStep from \"./PlantRecWStep\";\r\n\r\nexport default PlantRecWStep;\r\n","import styled from \"styled-components\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst Container = styled.div`\r\n    background: white;\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n    background: #2d2d2d;\r\n    color: white;\r\n    padding: 10px;\r\n`;\r\n\r\nconst Content = styled.div`\r\n    flex-grow: 1;\r\n    background: #3f3f3f;\r\n    padding: 10px;\r\n    overflow: auto;\r\n\r\n    & .MuiCircularProgress-colorPrimary {\r\n        color: #98BD3B;\r\n    }\r\n`;\r\n\r\nconst Footer = styled.div`\r\n    background: #2d2d2d;\r\n    padding: 10px;\r\n    flex-direction: row;\r\n`;\r\n\r\nconst SelectionButton = styled(Button)`\r\n    background-color: #6fc6df !important;\r\n    height: 40px;\r\n    & .MuiButton-label {\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nconst CompletionButton = styled(Button)`\r\n    background-color: #6fc6df !important;\r\n    height: 40px;\r\n    width: 100% !important;\r\n    & .MuiButton-label {\r\n        font-weight: bold;\r\n    }\r\n`;\r\n\r\nexport {\r\n    Container,\r\n    Header,\r\n    Content,\r\n    Footer,\r\n    SelectionButton,\r\n    CompletionButton,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { loadModules } from \"esri-loader\";\r\n\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport { Container, Header, Content } from \"./styles\";\r\n\r\nconst PlantRecWStep = (props) => {\r\n    useEffect(() => {\r\n        loadModules([\r\n            \"esri/tasks/QueryTask\",\r\n            \"esri/geometry/Polygon\",\r\n            \"esri/request\",\r\n        ]).then(async ([QueryTask, Polygon, esriRequest]) => {\r\n            const heightTask = new QueryTask({\r\n                url: window.config.roofLayer.url,\r\n            });\r\n            const heightResult = await heightTask.execute({\r\n                geometry: props.AoI,\r\n                outFields: window.config.roofLayer.heightField,\r\n                geometryType: \"esriGeometryPolygon\",\r\n                inSR: props.AoI.spatialReference,\r\n            });\r\n            const heightVal = Math.ceil(\r\n                heightResult.features[0].attributes[\r\n                    window.config.roofLayer.heightField\r\n                ]\r\n            );\r\n\r\n            esriRequest(`${window.config.growsLayer.url}/addFeatures`, {\r\n                query: {\r\n                    f: \"json\",\r\n                    features: JSON.stringify([\r\n                        {\r\n                            geometry: new Polygon(props.AoI),\r\n                            attributes: {\r\n                                start_time: new Date().getTime(),\r\n                                end_time: new Date(\r\n                                    new Date().getTime() +\r\n                                        props.plantInfo.growPeriod *\r\n                                            24 *\r\n                                            60 *\r\n                                            60 *\r\n                                            1000\r\n                                ).getTime(),\r\n                                plant_type: props.plantInfo.plantType,\r\n                                expected_yield: props.plantInfo.exYield,\r\n                                height: heightVal,\r\n                                plantation_type: props.PType,\r\n                                creator_id: props.creatorId,\r\n                            },\r\n                        },\r\n                    ]),\r\n                },\r\n                method: \"post\",\r\n            }).then((result) => {\r\n                props.history.push(\r\n                    `/grow/${result.data.addResults[0].objectId}`\r\n                );\r\n            });\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <Container>\r\n            <Header>Creating Grow</Header>\r\n            <Content style={{ textAlign: \"center\" }}>\r\n                <span>\r\n                    <p style={{ color: \"white\" }}>\r\n                        Congratulations! We're starting your grow.\r\n                    </p>\r\n                    <CircularProgress />\r\n                </span>\r\n            </Content>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(PlantRecWStep);\r\n","import CreateGrowWStep from \"./CreateGrowWStep\";\r\n\r\nexport default CreateGrowWStep;\r\n","import NewGrowScreen from './NewGrowScreen';\r\n\r\nexport default NewGrowScreen;","import React, { useEffect, useContext, useState } from \"react\";\r\nimport { withRouter, Redirect } from \"react-router\";\r\nimport { AuthContext } from \"../Auth\";\r\n\r\nimport { Container } from \"./styles\";\r\nimport Navbar from \"../Navbar\";\r\nimport NewGrowMap from \"../NewGrowMap\";\r\nimport GrowWizard from \"../GrowWizard\";\r\nimport DrawPolygonWStep from \"../DrawPolygonWStep\";\r\nimport SelectPTypeWStep from \"../SelectPTypeWStep\";\r\nimport PlantRecWStep from \"../PlantRecWStep\";\r\nimport CreateGrowWStep from \"../CreateGrowWStep\";\r\n\r\nconst NewGrowScreen = (props) => {\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    const [selectState, setSelectState] = useState(-1);\r\n    const [AoI, setAoI] = useState(null);\r\n    const [plantationType, setPlantationType] = useState(1);\r\n    const [plantInfo, setPlantInfo] = useState(null);\r\n\r\n    if (!currentUser) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    const selectionComplete = (area) => {\r\n        setSelectState(1);\r\n        setAoI(area);\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <Navbar history={props.history} />\r\n            <NewGrowMap\r\n                selectState={selectState}\r\n                onSelectionComplete={selectionComplete}\r\n            />\r\n            <GrowWizard>\r\n                <DrawPolygonWStep\r\n                    onSelectClicked={() => {\r\n                        setSelectState(0);\r\n                    }}\r\n                    selectState={selectState}\r\n                />\r\n                <SelectPTypeWStep\r\n                    onChange={(type) => {\r\n                        setPlantationType(type);\r\n                    }}\r\n                />\r\n                <PlantRecWStep\r\n                    AoI={AoI}\r\n                    PType={plantationType}\r\n                    onPlantSelection={setPlantInfo}\r\n                />\r\n                <CreateGrowWStep\r\n                    AoI={AoI}\r\n                    PType={plantationType}\r\n                    plantInfo={plantInfo}\r\n                    creatorId={currentUser.uid}\r\n                    history={props.history}\r\n                />\r\n            </GrowWizard>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default withRouter(NewGrowScreen);\r\n","import \"./App.css\";\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\nimport { AuthProvider } from \"./Auth\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\nimport { theme } from \"./theme\";\nimport { setDefaultOptions } from \"esri-loader\";\n\nimport LoginScreen from \"./LoginScreen\";\nimport AllGrowsScreen from \"./AllGrowsScreen\";\nimport ProfileScreen from \"./ProfileScreen\";\nimport RegisterScreen from \"./RegisterScreen\";\nimport ForgotPassScreen from \"./ForgotPassScreen\";\nimport GrowScreen from \"./GrowScreen\";\nimport NewGrowScreen from \"./NewGrowScreen\";\n\nconst App = () => {\n    setDefaultOptions({ css: true });\n    return (\n        <AuthProvider>\n            <MuiThemeProvider theme={theme}>\n                <Router>\n                    <div className=\"root\">\n                        <Route exact path=\"/\">\n                            <Redirect to=\"/all\" />\n                        </Route>\n                        <Route exact path=\"/all\" component={AllGrowsScreen} />\n                        <Route exact path=\"/login\" component={LoginScreen} />\n                        <Route exact path=\"/profile/:profileId\" component={ProfileScreen} />\n                        <Route exact path=\"/register\" component={RegisterScreen} />\n                        <Route exact path=\"/forgotpass\" component={ForgotPassScreen} />\n                        <Route exact path=\"/grow/:growId\" component={GrowScreen} />\n                        <Route exact path=\"/new\" component={NewGrowScreen} />\n                    </div>\n                </Router>\n            </MuiThemeProvider>\n        </AuthProvider>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}